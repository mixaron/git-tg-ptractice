import { InlineKeyboard } from "grammy";
import { PrismaClient } from "@prisma/client";
import { MyContext } from "../types/types";
import { escapeMarkdownForAuthorLink, checkContextIds } from "../utils/utils"; // –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø—É—Ç–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ

const prisma = new PrismaClient();

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–±—ç–∫ –≤—ã–±–æ—Ä–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.
 * –§–æ—Ä–º–∏—Ä—É–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º —É–¥–∞–ª–µ–Ω–∏—è.
 * @param ctx –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è.
 */
export async function handleDeleteRepoCallback(ctx: MyContext) {
    await ctx.answerCallbackQuery(); // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∫–æ–ª–±—ç–∫, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏"

    // –ò–∑–≤–ª–µ–∫–∞–µ–º repoId –∏ threadId –∏–∑ callback_data
    const repoId = parseInt(ctx.match![1]);
    const threadIdFromCallback = ctx.match![2] === 'null' ? null : parseInt(ctx.match![2]);

    if (isNaN(repoId)) {
        return ctx.reply("‚ö†Ô∏è –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π ID —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è.");
    }

    try {
        const repoToDelete = await prisma.repository.findUnique({ where: { id: repoId } });
        if (!repoToDelete) {
            return ctx.reply("–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω.");
        }

        // –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è/–æ—Ç–º–µ–Ω—ã, –ø–µ—Ä–µ–¥–∞–≤–∞—è repoId –∏ threadId –æ–±—Ä–∞—Ç–Ω–æ
        const confirmationKeyboard = new InlineKeyboard()
            .text("‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", `confirm_delete_${repoId}_${threadIdFromCallback ?? 'null'}`)
            .text("‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∞", `cancel_delete_${repoId}_${threadIdFromCallback ?? 'null'}`);

        // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        let text = `–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π *${escapeMarkdownForAuthorLink(repoToDelete.fullName)}*`;
        if (threadIdFromCallback !== null) {
            text += ` (–¢–µ–º–∞: ${escapeMarkdownForAuthorLink(repoToDelete.name)})`;
        }
        text += '?';

        // –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å.
        try {
            await ctx.editMessageText(text, {
                reply_markup: confirmationKeyboard,
                parse_mode: "Markdown",
            });
        } catch (e: any) {
            if (e.description?.includes("message is not modified")) {
                console.warn("‚ö†Ô∏è editMessageText: —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –æ—à–∏–±–∫–∞ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∞.");
            } else {
                throw e; // –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –¥—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
            }
        }

    } catch (e) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –∫ —É–¥–∞–ª–µ–Ω–∏—é:", e);
        await ctx.reply("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –∫ —É–¥–∞–ª–µ–Ω–∏—é.");
    }
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–±—ç–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è.
 * –í—ã–ø–æ–ª–Ω—è–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–∏–≤—è–∑–∫–∏, —Ç–µ–º—ã –∏, –≤–æ–∑–º–æ–∂–Ω–æ, —Å–∞–º–æ–≥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –∏–∑ –ë–î.
 * @param ctx –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è.
 */
export async function handleConfirmDeleteCallback(ctx: MyContext) {
    await ctx.answerCallbackQuery("–£–¥–∞–ª—è–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π..."); // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∫–æ–ª–±—ç–∫
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º repoId –∏ threadId –∏–∑ callback_data
    const repoId = parseInt(ctx.match![1]);
    const threadIdFromCallback = ctx.match![2] === 'null' ? null : parseInt(ctx.match![2]);

    const { userId, chatId } = checkContextIds(ctx); // –ü—Ä–æ–≤–µ—Ä—è–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —á–∞—Ç–∞

    if (isNaN(repoId) || userId === null || chatId === null) {
        return; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è, –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã
    }

    let finalUserMessage = ""; // –°—Ç—Ä–æ–∏–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    try {
        const user = await prisma.user.findUnique({ where: { telegramId: userId } });
        if (!user) {
            await ctx.reply("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ.");
            return;
        }

        // –ù–∞—Ö–æ–¥–∏–º –ø—Ä–∏–≤—è–∑–∫—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (–∏—Å–ø–æ–ª—å–∑—É–µ–º repoId, chatId –∏ threadIdFromCallback –¥–ª—è —Ç–æ—á–Ω–æ—Å—Ç–∏)
        const bindingToRemove = await prisma.chatBinding.findFirst({
            where: {
                repositoryId: repoId,
                chatId: chatId,
                threadId: threadIdFromCallback,
            },
            include: {
                repository: true // –í–∫–ª—é—á–∞–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –µ–≥–æ –ø–æ–ª–Ω–æ–≥–æ –∏–º–µ–Ω–∏
            }
        });

        if (!bindingToRemove) {
            // –ï—Å–ª–∏ –ø—Ä–∏–≤—è–∑–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –≤–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–∞ —É–∂–µ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞
            const replyToMessageId = ctx.callbackQuery?.message?.message_id;
            await ctx.reply(
                "–ü—Ä–∏–≤—è–∑–∫–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –∫ —ç—Ç–æ–º—É —á–∞—Ç—É/—Ç–µ–º–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ —É–¥–∞–ª–µ–Ω–∞.",
                replyToMessageId ? { reply_to_message_id: replyToMessageId } : undefined
            );
            return;
        }

        const repoFullName = bindingToRemove.repository.fullName;
        const repoName = bindingToRemove.repository.name; // –î–ª—è –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–µ–º—ã

        // 1. –£–¥–∞–ª—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –ø—Ä–∏–≤—è–∑–∫—É ChatBinding
        // –ü–æ—Å–∫–æ–ª—å–∫—É @@unique([repositoryId, chatId]), –º—ã —É–¥–∞–ª—è–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—É—é –∑–∞–ø–∏—Å—å –¥–ª—è —ç—Ç–æ–π –ø–∞—Ä—ã.
        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ threadId –≤ —É—Å–ª–æ–≤–∏–µ where —Ç—É—Ç –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, –Ω–æ –ø–æ–º–æ–≥–∞–µ—Ç –±—ã—Ç—å –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–º,
        // –µ—Å–ª–∏ –≤ –±—É–¥—É—â–µ–º —Å—Ö–µ–º–∞ –∏–∑–º–µ–Ω–∏—Ç—Å—è –∏–ª–∏ –µ—Å–ª–∏ —ç—Ç–æ –ø–æ–º–æ–∂–µ—Ç —Å –æ—Ç–ª–∞–¥–∫–æ–π.
        await prisma.chatBinding.deleteMany({
            where: {
                repositoryId: repoId,
                chatId: chatId,
                threadId: threadIdFromCallback, 
            },
        });

        // 2. –õ–æ–≥–∏–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–µ–º—ã —Ñ–æ—Ä—É–º–∞ (–µ—Å–ª–∏ —ç—Ç–æ –±—ã–ª–∞ —Ç–µ–º–∞)
        if (threadIdFromCallback !== null) { // –ï—Å–ª–∏ —É–¥–∞–ª—è–µ–º–∞—è –ø—Ä–∏–≤—è–∑–∫–∞ –±—ã–ª–∞ –∫ —Ç–æ–ø–∏–∫—É
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Å—Ç–∞–ª–∏—Å—å –ª–∏ –µ—â—ë –ø—Ä–∏–≤—è–∑–∫–∏ —ç—Ç–æ–≥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –∫ —ç—Ç–æ–º—É –∂–µ —á–∞—Ç—É (–≤ –¥—Ä—É–≥–∏—Ö —Ç–æ–ø–∏–∫–∞—Ö –∏–ª–∏ –≤ –æ–±—â–µ–º)
            // C –≤–∞—à–µ–π —Ç–µ–∫—É—â–µ–π —Å—Ö–µ–º–æ–π `@@unique([repositoryId, chatId])`
            // `remainingBindingsInThisChat` –±—É–¥–µ—Ç 0 –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–π –ø—Ä–∏–≤—è–∑–∫–∏ –¥–ª—è `(repoId, chatId)`
            // –ü–æ—ç—Ç–æ–º—É, –µ—Å–ª–∏ `threadIdFromCallback !== null`, —Ç–µ–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —É–¥–∞–ª–µ–Ω–∞.
            const remainingBindingsInThisChat = await prisma.chatBinding.count({
                where: {
                    repositoryId: repoId,
                    chatId: chatId,
                }
            });

            if (remainingBindingsInThisChat === 0) {
                try {
                    await ctx.api.deleteForumTopic(Number(chatId), Number(threadIdFromCallback));
                    finalUserMessage += `üóëÔ∏è –¢–µ–º–∞ –¥–ª—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è *${escapeMarkdownForAuthorLink(repoName)}* —É–¥–∞–ª–µ–Ω–∞.\n`;
                } catch (topicDeleteError: any) {
                    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–µ–º—ã ${threadIdFromCallback} –¥–ª—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è ${repoId} –≤ —á–∞—Ç–µ ${chatId}:`, topicDeleteError);
                    if (topicDeleteError.description?.includes('not enough rights to manage topics')) {
                        finalUserMessage += "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ç–µ–º—É —Ñ–æ—Ä—É–º–∞: —É –±–æ—Ç–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–¥–∞–π—Ç–µ –±–æ—Ç—É —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ '–£–ø—Ä–∞–≤–ª—è—Ç—å —Ç–µ–º–∞–º–∏'.\n";
                    } else if (topicDeleteError.description?.includes('thread not found')) {
                        finalUserMessage += "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ç–µ–º—É —Ñ–æ—Ä—É–º–∞: —Ç–µ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–∞ —É–∂–µ —É–¥–∞–ª–µ–Ω–∞.\n";
                    } else {
                        finalUserMessage += "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —Ç–µ–º—É —Ñ–æ—Ä—É–º–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –±–æ—Ç–∞.\n";
                    }
                }
            } else {
                // –≠—Ç–æ—Ç –±–ª–æ–∫ –∫–æ–¥–∞ —Å –≤–∞—à–µ–π —Ç–µ–∫—É—â–µ–π —Å—Ö–µ–º–æ–π `@@unique([repositoryId, chatId])` –≤ ChatBinding
                // –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç, —Ç–∞–∫ –∫–∞–∫ `remainingBindingsInThisChat` –≤—Å–µ–≥–¥–∞ –±—É–¥–µ—Ç 0.
                // –ï—Å–ª–∏ –æ–Ω –¥–æ—Å—Ç–∏–≥–Ω—É—Ç, —ç—Ç–æ –º–æ–∂–µ—Ç —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ –ø—Ä–æ–±–ª–µ–º—É —Å –≤–∞—à–µ–π –º–∏–≥—Ä–∞—Ü–∏–µ–π –∏–ª–∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å—é.
                finalUserMessage += `–ü—Ä–∏–≤—è–∑–∫–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è *${escapeMarkdownForAuthorLink(repoFullName)}* –∫ —ç—Ç–æ–π —Ç–µ–º–µ —É–¥–∞–ª–µ–Ω–∞. –ù–æ —Ç–µ–º–∞ –Ω–µ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞, —Ç–∞–∫ –∫–∞–∫ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –≤—Å–µ –µ—â–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è –≤ –¥—Ä—É–≥–∏—Ö –º–µ—Å—Ç–∞—Ö —ç—Ç–æ–≥–æ —á–∞—Ç–∞.\n`;
            }
        } else {
            // –ï—Å–ª–∏ –ø—Ä–∏–≤—è–∑–∫–∞ –±—ã–ª–∞ –∫ –≥–ª–∞–≤–Ω–æ–º—É —á–∞—Ç—É (threadIdFromCallback === null)
            finalUserMessage += `‚úÖ –ü—Ä–∏–≤—è–∑–∫–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è *${escapeMarkdownForAuthorLink(repoFullName)}* –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É —á–∞—Ç—É —É–¥–∞–ª–µ–Ω–∞.\n`;
            finalUserMessage += `_–¢–µ–º—ã —Ñ–æ—Ä—É–º–∞ –Ω–µ —É–¥–∞–ª—è—é—Ç—Å—è, –µ—Å–ª–∏ –ø—Ä–∏–≤—è–∑–∫–∞ –±—ã–ª–∞ –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É —á–∞—Ç—É._\n`;
        }

        // 3. –õ–æ–≥–∏–∫–∞ –ø–æ–ª–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –∏–∑ –ë–î (–µ—Å–ª–∏ –æ–Ω –Ω–∏–≥–¥–µ –±–æ–ª—å—à–µ –Ω–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è)
        const totalRemainingChatBindingsForRepo = await prisma.chatBinding.count({
            where: {
                repositoryId: repoId,
            }
        });

        if (totalRemainingChatBindingsForRepo === 0) {
            // –ï—Å–ª–∏ –ø—Ä–∏–≤—è–∑–æ–∫ –∫ —á–∞—Ç–∞–º –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å —Å–æ–≤—Å–µ–º, —É–¥–∞–ª—è–µ–º –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –∏ —Å–∞–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
            await prisma.repositoryUser.deleteMany({
                where: { repositoryId: repoId }
            });
            await prisma.repository.delete({
                where: { id: repoId }
            });
            console.log(`–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π ${repoFullName} (${repoId}) –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–µ–Ω –∏–∑ –ë–î, —Ç–∞–∫ –∫–∞–∫ –Ω–µ –∏–º–µ–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–∏–≤—è–∑–æ–∫ –∫ —á–∞—Ç–∞–º.`);
            finalUserMessage += `\n‚úÖ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π *${escapeMarkdownForAuthorLink(repoFullName)}* –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–µ–Ω –∏–∑ —Å–∏—Å—Ç–µ–º—ã.`;
        } else {
            // –ï—Å–ª–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –≤—Å–µ –µ—â–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –¥—Ä—É–≥–∏–º —á–∞—Ç–∞–º (–Ω–µ –ø–æ–ª–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ)
            // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –µ—â–µ –Ω–µ –±—ã–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —à–∞–≥–∞—Ö
            if (finalUserMessage === "") { 
                 finalUserMessage = `‚úÖ –ü—Ä–∏–≤—è–∑–∫–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è *${escapeMarkdownForAuthorLink(repoFullName)}* —É–¥–∞–ª–µ–Ω–∞ –∏–∑ —ç—Ç–æ–≥–æ —á–∞—Ç–∞.\n`;
            }
            finalUserMessage += `\n_–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π *${escapeMarkdownForAuthorLink(repoFullName)}* –≤—Å–µ –µ—â–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è –≤ –¥—Ä—É–≥–∏—Ö —á–∞—Ç–∞—Ö._`;
        }

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await ctx.editMessageText(finalUserMessage.trim(), { parse_mode: "Markdown" });

    } catch (e: any) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è:", e);
        await ctx.reply("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
    }
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–±—ç–∫ –æ—Ç–º–µ–Ω—ã —É–¥–∞–ª–µ–Ω–∏—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è.
 * @param ctx –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è.
 */
export async function handleCancelDeleteCallback(ctx: MyContext) {
    await ctx.answerCallbackQuery("–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ."); // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∫–æ–ª–±—ç–∫

    // –ò–∑–≤–ª–µ–∫–∞–µ–º repoId –∏ threadId –∏–∑ callback_data
    const repoId = parseInt(ctx.match![1]);
    const threadIdFromCallback = ctx.match![2] === 'null' ? null : parseInt(ctx.match![2]);

    try {
        const repoInfo = await prisma.repository.findUnique({ where: { id: repoId }, select: { fullName: true, name: true } });
        const repoFullName = repoInfo ? repoInfo.fullName : "—Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π";
        const repoName = repoInfo ? repoInfo.name : "—Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π";

        let messageText = `‚ùå –£–¥–∞–ª–µ–Ω–∏–µ *${escapeMarkdownForAuthorLink(repoFullName)}* –æ—Ç–º–µ–Ω–µ–Ω–æ.`;
        if (threadIdFromCallback !== null) {
            messageText += ` (–¢–µ–º–∞: ${escapeMarkdownForAuthorLink(repoName)})`;
        }

        // –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç–º–µ–Ω–µ
        await ctx.editMessageText(messageText, { parse_mode: "Markdown" });
    } catch (e) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ —É–¥–∞–ª–µ–Ω–∏—è:", e);
        await ctx.reply("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ.");
    }
}
