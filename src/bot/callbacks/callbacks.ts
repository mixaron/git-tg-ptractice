import { InlineKeyboard } from "grammy";
import { PrismaClient } from "@prisma/client";
import { MyContext } from "../types/types";
import { escapeMarkdownForAuthorLink, checkContextIds } from "../utils/utils"; 

const prisma = new PrismaClient();


export async function handleDeleteRepoCallback(ctx: MyContext) {
    await ctx.answerCallbackQuery(); 

    
    const repoId = parseInt(ctx.match![1]);
    const threadIdFromCallback = ctx.match![2] === 'null' ? null : parseInt(ctx.match![2]);

    if (isNaN(repoId)) {
        return ctx.reply("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π ID —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è.");
    }

    try {
        const repoToDelete = await prisma.repository.findUnique({ where: { id: repoId } });
        if (!repoToDelete) {
            return ctx.reply("–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω.");
        }

        
        const confirmationKeyboard = new InlineKeyboard()
            .text("‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", `confirm_delete_${repoId}_${threadIdFromCallback ?? 'null'}`)
            .text("‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∞", `cancel_delete_${repoId}_${threadIdFromCallback ?? 'null'}`);

        
        let text = `–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π *${escapeMarkdownForAuthorLink(repoToDelete.fullName)}*`;
        if (threadIdFromCallback !== null) {
            text += ` (–¢–µ–º–∞: ${escapeMarkdownForAuthorLink(repoToDelete.name)})`;
        }
        text += '?';

        
        try {
            await ctx.editMessageText(text, {
                reply_markup: confirmationKeyboard,
                parse_mode: "Markdown",
            });
        } catch (e: any) {
            if (e.description?.includes("message is not modified")) {
                console.warn(" editMessageText: —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –æ—à–∏–±–∫–∞ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∞.");
            } else {
                throw e; 
            }
        }

    } catch (e) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –∫ —É–¥–∞–ª–µ–Ω–∏—é:", e);
        await ctx.reply(" –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –∫ —É–¥–∞–ª–µ–Ω–∏—é.");
    }
}


export async function handleConfirmDeleteCallback(ctx: MyContext) {
    await ctx.answerCallbackQuery("–£–¥–∞–ª—è–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π..."); 
    
    
    const repoId = parseInt(ctx.match![1]);
    const threadIdFromCallback = ctx.match![2] === 'null' ? null : parseInt(ctx.match![2]);

    const { userId, chatId } = checkContextIds(ctx); 

    if (isNaN(repoId) || userId === null || chatId === null) {
        return; 
    }

    let finalUserMessage = ""; 

    try {
        const user = await prisma.user.findUnique({ where: { telegramId: userId } });
        if (!user) {
            await ctx.reply("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ.");
            return;
        }

        
        const bindingToRemove = await prisma.chatBinding.findFirst({
            where: {
                repositoryId: repoId,
                chatId: chatId,
                threadId: threadIdFromCallback,
            },
            include: {
                repository: true 
            }
        });

        if (!bindingToRemove) {
            
            const replyToMessageId = ctx.callbackQuery?.message?.message_id;
            await ctx.reply(
                "–ü—Ä–∏–≤—è–∑–∫–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –∫ —ç—Ç–æ–º—É —á–∞—Ç—É/—Ç–µ–º–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ —É–¥–∞–ª–µ–Ω–∞.",
                replyToMessageId ? { reply_to_message_id: replyToMessageId } : undefined
            );
            return;
        }

        const repoFullName = bindingToRemove.repository.fullName;
        const repoName = bindingToRemove.repository.name; 

        
        
        
        
        await prisma.chatBinding.deleteMany({
            where: {
                repositoryId: repoId,
                chatId: chatId,
                threadId: threadIdFromCallback, 
            },
        });

        
        if (threadIdFromCallback !== null) { 
            
            
            
            
            const remainingBindingsInThisChat = await prisma.chatBinding.count({
                where: {
                    repositoryId: repoId,
                    chatId: chatId,
                }
            });

            if (remainingBindingsInThisChat === 0) {
                try {
                    await ctx.api.deleteForumTopic(Number(chatId), Number(threadIdFromCallback));
                    finalUserMessage += `üóëÔ∏è –¢–µ–º–∞ –¥–ª—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è *${escapeMarkdownForAuthorLink(repoName)}* —É–¥–∞–ª–µ–Ω–∞.\n`;
                } catch (topicDeleteError: any) {
                    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–µ–º—ã ${threadIdFromCallback} –¥–ª—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è ${repoId} –≤ —á–∞—Ç–µ ${chatId}:`, topicDeleteError);
                    if (topicDeleteError.description?.includes('not enough rights to manage topics')) {
                        finalUserMessage += " –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ç–µ–º—É —Ñ–æ—Ä—É–º–∞: —É –±–æ—Ç–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–¥–∞–π—Ç–µ –±–æ—Ç—É —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ '–£–ø—Ä–∞–≤–ª—è—Ç—å —Ç–µ–º–∞–º–∏'.\n";
                    } else if (topicDeleteError.description?.includes('thread not found')) {
                        finalUserMessage += " –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ç–µ–º—É —Ñ–æ—Ä—É–º–∞: —Ç–µ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–∞ —É–∂–µ —É–¥–∞–ª–µ–Ω–∞.\n";
                    } else {
                        finalUserMessage += " –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —Ç–µ–º—É —Ñ–æ—Ä—É–º–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –±–æ—Ç–∞.\n";
                    }
                }
            } else {
                
                
                
                finalUserMessage += `–ü—Ä–∏–≤—è–∑–∫–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è *${escapeMarkdownForAuthorLink(repoFullName)}* –∫ —ç—Ç–æ–π —Ç–µ–º–µ —É–¥–∞–ª–µ–Ω–∞. –ù–æ —Ç–µ–º–∞ –Ω–µ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞, —Ç–∞–∫ –∫–∞–∫ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –≤—Å–µ –µ—â–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è –≤ –¥—Ä—É–≥–∏—Ö –º–µ—Å—Ç–∞—Ö —ç—Ç–æ–≥–æ —á–∞—Ç–∞.\n`;
            }
        } else {
            
            finalUserMessage += ` –ü—Ä–∏–≤—è–∑–∫–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è *${escapeMarkdownForAuthorLink(repoFullName)}* –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É —á–∞—Ç—É —É–¥–∞–ª–µ–Ω–∞.\n`;
            finalUserMessage += `_–¢–µ–º—ã —Ñ–æ—Ä—É–º–∞ –Ω–µ —É–¥–∞–ª—è—é—Ç—Å—è, –µ—Å–ª–∏ –ø—Ä–∏–≤—è–∑–∫–∞ –±—ã–ª–∞ –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É —á–∞—Ç—É._\n`;
        }

        
        const totalRemainingChatBindingsForRepo = await prisma.chatBinding.count({
            where: {
                repositoryId: repoId,
            }
        });

        if (totalRemainingChatBindingsForRepo === 0) {
            
            await prisma.repositoryUser.deleteMany({
                where: { repositoryId: repoId }
            });
            await prisma.repository.delete({
                where: { id: repoId }
            });
            console.log(`–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π ${repoFullName} (${repoId}) –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–µ–Ω –∏–∑ –ë–î, —Ç–∞–∫ –∫–∞–∫ –Ω–µ –∏–º–µ–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–∏–≤—è–∑–æ–∫ –∫ —á–∞—Ç–∞–º.`);
            finalUserMessage += `\n‚úÖ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π *${escapeMarkdownForAuthorLink(repoFullName)}* –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–µ–Ω –∏–∑ —Å–∏—Å—Ç–µ–º—ã.`;
        } else {
            
            
            if (finalUserMessage === "") { 
                 finalUserMessage = `‚úÖ –ü—Ä–∏–≤—è–∑–∫–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è *${escapeMarkdownForAuthorLink(repoFullName)}* —É–¥–∞–ª–µ–Ω–∞ –∏–∑ —ç—Ç–æ–≥–æ —á–∞—Ç–∞.\n`;
            }
            finalUserMessage += `\n_–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π *${escapeMarkdownForAuthorLink(repoFullName)}* –≤—Å–µ –µ—â–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è –≤ –¥—Ä—É–≥–∏—Ö —á–∞—Ç–∞—Ö._`;
        }

        
        await ctx.editMessageText(finalUserMessage.trim(), { parse_mode: "Markdown" });

    } catch (e: any) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è:", e);
        await ctx.reply(" –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
    }
}


export async function handleCancelDeleteCallback(ctx: MyContext) {
    await ctx.answerCallbackQuery("–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ."); 

    
    const repoId = parseInt(ctx.match![1]);
    const threadIdFromCallback = ctx.match![2] === 'null' ? null : parseInt(ctx.match![2]);

    try {
        const repoInfo = await prisma.repository.findUnique({ where: { id: repoId }, select: { fullName: true, name: true } });
        const repoFullName = repoInfo ? repoInfo.fullName : "—Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π";
        const repoName = repoInfo ? repoInfo.name : "—Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π";

        let messageText = `‚ùå –£–¥–∞–ª–µ–Ω–∏–µ *${escapeMarkdownForAuthorLink(repoFullName)}* –æ—Ç–º–µ–Ω–µ–Ω–æ.`;
        if (threadIdFromCallback !== null) {
            messageText += ` (–¢–µ–º–∞: ${escapeMarkdownForAuthorLink(repoName)})`;
        }

        
        await ctx.editMessageText(messageText, { parse_mode: "Markdown" });
    } catch (e) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ —É–¥–∞–ª–µ–Ω–∏—è:", e);
        await ctx.reply(" –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ.");
    }
}
