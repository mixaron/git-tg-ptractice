import { Keyboard, InlineKeyboard } from "grammy";
import { checkContextIds, escapeMarkdownForAuthorLink, getUserWithRepos } from "../utils/utils";
import { MyContext } from "../types/types";
import { prisma } from "../../db/db";

export async function handleStartCommand(ctx: MyContext) {
  const { userId } = checkContextIds(ctx);
  if (userId === null) return;

  const userName = ctx.from?.username;

  try {
    await prisma.user.upsert({
      where: { telegramId: userId },
      update: { telegramName: userName || null },
      create: { telegramId: userId, telegramName: userName || null },
    });
    console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} (${userName || 'N/A'}) –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω/–æ–±–Ω–æ–≤–ª–µ–Ω.`);
  } catch (e) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", e);
    return ctx.reply("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–∞—Å –≤ —Å–∏—Å—Ç–µ–º–µ.");
  }

  const replyMarkup = {
    keyboard: [
      [{ text: "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π" }],
      [{ text: "üìã –ú–æ–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏" }],
      [{ text: "‚ùì –ü–æ–º–æ—â—å" }],
      [{ text: "üîó –ü—Ä–∏–≤—è–∑–∞—Ç—å GitHub" }, { text: "üóëÔ∏è –û—Ç–≤—è–∑–∞—Ç—å GitHub" }],
      [{ text: "ü§° –û—Ç–≤—è–∑–∞—Ç—å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π" }],
    ],
    resize_keyboard: true,
    one_time_keyboard: false,
  };

  await ctx.reply("üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ GitHub –∫–æ–º–º–∏—Ç–∞—Ö. –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:", { reply_markup: replyMarkup });
}

export async function handleHelpCommand(ctx: MyContext) {
  await ctx.reply(
    "üìö –ö–æ–º–∞–Ω–¥—ã:\n" +
    "/start ‚Äî –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n" +
    "/addrepo ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è\n" +
    "/myrepo ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤\n" +
    "/delrepo ‚Äî —É–¥–∞–ª–∏—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π\n" +
    "/linkgithub ‚Äî –ø—Ä–∏–≤—è–∑–∞—Ç—å –≤–∞—à GitHub –Ω–∏–∫–Ω–µ–π–º\n" +
    "/unlinkgithub ‚Äî –æ—Ç–≤—è–∑–∞—Ç—å –≤–∞—à GitHub –Ω–∏–∫–Ω–µ–π–º"
  );
}

export async function handleAddRepoCommand(ctx: MyContext) {
  ctx.session.state = 'awaiting_repo_name';
  await ctx.reply("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –∏–º—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è (–ø—Ä–∏–º–µ—Ä: `user/my-repo`):", { parse_mode: "Markdown" });
}

export async function handleMyRepoCommand(ctx: MyContext) {
  const { userId } = checkContextIds(ctx);
  if (userId === null) return;

  const user = await getUserWithRepos(userId);

  if (!user || user.repositories.length === 0) {
    return ctx.reply("üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤.");
  }

  const text = user.repositories
    .map((ru, i) => `üîπ ${i + 1}. [${ru.repository.fullName}](${ru.repository.githubUrl})`)
    .join("\n");

  await ctx.reply(`üì¶ –í–∞—à–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏:\n${text}`, { parse_mode: "Markdown" });
}

export async function handleDelRepoCommand(ctx: MyContext) {
  const { userId, chatId } = checkContextIds(ctx);
  if (userId === null || chatId === null) return;

  const user = await getUserWithRepos(userId);

  if (!user || user.repositories.length === 0) {
    return ctx.reply("üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.");
  }

  const allUserBindingsInThisChat = await prisma.chatBinding.findMany({
    where: {
      chatId: chatId,
      repositoryId: { in: user.repositories.map(ru => ru.repository.id) }
    },
    include: {
      repository: true
    }
  });

  if (allUserBindingsInThisChat.length === 0) {
    return ctx.reply("üì≠ –í —ç—Ç–æ–º —á–∞—Ç–µ —É –≤–∞—Å –Ω–µ—Ç –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.");
  }

  const inlineKeyboard = new InlineKeyboard();
  for (const binding of allUserBindingsInThisChat) {
    const threadIdSuffix = binding.threadId !== null ? binding.threadId.toString() : 'null';
    const buttonText = binding.threadId !== null
      ? `${binding.repository.fullName} (–¢–µ–º–∞: ${binding.repository.name})`
      : `${binding.repository.fullName} (–ì–ª–∞–≤–Ω—ã–π —á–∞—Ç)`;

    const button = {
      text: escapeMarkdownForAuthorLink(buttonText),
      callback_data: `select_to_delete_repo_${binding.repository.id}_${threadIdSuffix}`
    };
    inlineKeyboard.row(button);
  }

  const messageThreadId = ctx.message?.message_thread_id;
  await ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", {
    reply_markup: inlineKeyboard,
    ...(messageThreadId ? { message_thread_id: messageThreadId } : {})
  });
}

export async function handleLinkGithubCommand(ctx: MyContext) {
  ctx.session.state = 'awaiting_github_username';
  await ctx.reply("üîó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–∏–∫–Ω–µ–π–º –Ω–∞ GitHub:");
}

export async function handleUnlinkGithubCommand(ctx: MyContext) {
  const { userId } = checkContextIds(ctx);
  if (userId === null) return;

  try {
    const user = await prisma.user.findUnique({
      where: { telegramId: userId },
      select: { githubLogin: true }
    });

    if (!user || !user.githubLogin) {
      return ctx.reply("‚ùå –í–∞—à –∞–∫–∫–∞—É–Ω—Ç Telegram –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ GitHub.");
    }

    await prisma.user.update({
      where: { telegramId: userId },
      data: { githubLogin: null },
    });
    return ctx.reply("‚úÖ –í–∞—à GitHub –Ω–∏–∫–Ω–µ–π–º —É—Å–ø–µ—à–Ω–æ –æ—Ç–≤—è–∑–∞–Ω.");
  } catch (e) {
    console.error("–û—à–∏–±–∫–∞ –æ—Ç–≤—è–∑–∫–∏ GitHub –Ω–∏–∫–Ω–µ–π–º–∞:", e);
    return ctx.reply("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤—è–∑–∫–µ GitHub –Ω–∏–∫–Ω–µ–π–º–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
  }
}

export async function handleTextMessage(ctx: MyContext) {
  const input = ctx.message?.text?.trim();
  if (!input) return;

  if (input === "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π") {
    return handleAddRepoCommand(ctx);
  }
  if (input === "üìã –ú–æ–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏") {
    return handleMyRepoCommand(ctx);
  }
  if (input === "‚ùì –ü–æ–º–æ—â—å") {
    return handleHelpCommand(ctx);
  }
  if (input === "üîó –ü—Ä–∏–≤—è–∑–∞—Ç—å GitHub") {
    return handleLinkGithubCommand(ctx);
  }
  if (input === "üóëÔ∏è –û—Ç–≤—è–∑–∞—Ç—å GitHub") {
    return handleUnlinkGithubCommand(ctx);
  }
  if (input === "ü§° –û—Ç–≤—è–∑–∞—Ç—å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π") {
    return handleDelRepoCommand(ctx);
  }

  if (input.startsWith("/")) return;

  const { userId, chatId } = checkContextIds(ctx);
  if (userId === null || chatId === null) return;

  if (ctx.session.state === 'awaiting_github_username') {
    const githubLogin = input;

    if (!githubLogin.match(/^[a-zA-Z0-9]+(?:-[a-zA-Z0-9]+)*$/)) {
      return ctx.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–∏–∫–Ω–µ–π–º–∞ GitHub. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ –¥–µ—Ñ–∏—Å—ã (–Ω–µ –≤ –Ω–∞—á–∞–ª–µ/–∫–æ–Ω—Ü–µ).");
    }

    try {
      await prisma.user.update({
        where: { telegramId: userId },
        data: { githubLogin: githubLogin },
      });
      ctx.session.state = undefined;
      return ctx.reply(`‚úÖ –í–∞—à GitHub –Ω–∏–∫–Ω–µ–π–º *${githubLogin}* —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω!`, { parse_mode: "Markdown" });
    } catch (e: any) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏–≤—è–∑–∫–∏ GitHub –Ω–∏–∫–Ω–µ–π–º–∞:", e);
      if (e.message?.includes("Unique constraint failed")) {
        return ctx.reply("‚ö†Ô∏è –≠—Ç–æ—Ç –Ω–∏–∫–Ω–µ–π–º GitHub —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –¥—Ä—É–≥–æ–º—É –∞–∫–∫–∞—É–Ω—Ç—É.");
      }
      return ctx.reply("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–≤—è–∑–∫–µ GitHub –Ω–∏–∫–Ω–µ–π–º–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
    }
  }

  if (ctx.session.state === 'awaiting_repo_name') {
    ctx.session.state = undefined;
    if (!input.match(/^[\w.-]+\/[\w.-]+$/)) {
      return ctx.reply(
        "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–º–µ–Ω–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å/–∏–º—è-—Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è` (–ø—Ä–∏–º–µ—Ä: `octocat/Spoon-Knife`).",
        { parse_mode: "Markdown" }
      );
    }

    const fullName = input;
    const githubUrl = `https://github.com/${fullName}`;
    const name = fullName.split("/").pop()!;

    try {
      let finalThreadId: number | null = null;

      if (ctx.chat && (ctx.chat.type === "group" || ctx.chat.type === "supergroup")) {
        const messageThreadId = ctx.message?.message_thread_id;
        if (messageThreadId) {
          finalThreadId = messageThreadId;
        } else {
          const existingChatBinding = await prisma.chatBinding.findFirst({
            where: {
              chatId: chatId,
              repository: { fullName: fullName },
              NOT: { threadId: null }
            }
          });

          if (existingChatBinding && existingChatBinding.threadId !== null) {
            finalThreadId = existingChatBinding.threadId;
            const replyToMessageId = ctx.message?.message_id;
            await ctx.reply(
              `–≠—Ç–æ—Ç —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —É–∂–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è –≤ —Ç–æ–ø–∏–∫–µ: [${escapeMarkdownForAuthorLink(name)}](https://t.me/c/${chatId.toString().substring(4)}/${finalThreadId})`,
              {
                parse_mode: "Markdown",
                ...(replyToMessageId ? { reply_to_message_id: replyToMessageId } : {})
              }
            );
          } else {
            try {
              const chatInfo = await ctx.api.getChat(Number(chatId));
              if (chatInfo && chatInfo.type === 'supergroup' && chatInfo.is_forum) {
                const topic = await ctx.api.createForumTopic(Number(chatId), name);
                finalThreadId = topic.message_thread_id;
                const replyToMessageId = ctx.message?.message_id;
                await ctx.reply(
                  `üìä –°–æ–∑–¥–∞–Ω —Ç–æ–ø–∏–∫ –¥–ª—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è: [${escapeMarkdownForAuthorLink(name)}](https://t.me/c/${chatId.toString().substring(4)}/${finalThreadId})`,
                  {
                    parse_mode: "Markdown",
                    ...(replyToMessageId ? { reply_to_message_id: replyToMessageId } : {})
                  }
                );
              } else {
                await ctx.reply("‚ö†Ô∏è –≠—Ç–æ—Ç —á–∞—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ñ–æ—Ä—É–º–æ–º –∏–ª–∏ –±–æ—Ç –Ω–µ –º–æ–∂–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å —Ç–æ–ø–∏–∫–∏. –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –±—É–¥–µ—Ç –≤–µ—Å—Ç–∏—Å—å –≤ —Ç–µ–∫—É—â–µ–º —á–∞—Ç–µ.");
                finalThreadId = null;
              }
            } catch (topicError: any) {
              console.warn("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–æ–ø–∏–∫ —Ñ–æ—Ä—É–º–∞:", topicError.message);
              await ctx.reply("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ç–æ–ø–∏–∫ —Ñ–æ—Ä—É–º–∞ –¥–ª—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è. –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –±—É–¥–µ—Ç –≤–µ—Å—Ç–∏—Å—å –≤ —Ç–µ–∫—É—â–µ–º —á–∞—Ç–µ.");
              finalThreadId = null;
            }
          }
        }
      }

      const repo = await prisma.repository.upsert({
        where: { fullName },
        update: { name, githubUrl },
        create: { name, fullName, githubUrl },
      });

      await prisma.chatBinding.upsert({
        where: {
          repositoryId_chatId: {
            repositoryId: repo.id,
            chatId: chatId,
          }
        },
        update: { threadId: finalThreadId },
        create: { repositoryId: repo.id, chatId, threadId: finalThreadId },
      });

      const user = await getUserWithRepos(userId);
      if (user) {
        await prisma.repositoryUser.upsert({
          where: { userId_repositoryId: { userId: user.id, repositoryId: repo.id } },
          update: {},
          create: { userId: user.id, repositoryId: repo.id },
        });
      }

      await ctx.reply(`‚úÖ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π *${escapeMarkdownForAuthorLink(fullName)}* –¥–æ–±–∞–≤–ª–µ–Ω –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è!`, { parse_mode: "Markdown" });
    } catch (error: any) {
      console.error("–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è:", error);
      if (error.code === 'P2002' && error.meta?.target) {
        if (Array.isArray(error.meta.target) && error.meta.target.includes('repositoryId') && error.meta.target.includes('chatId')) {
          await ctx.reply("‚ö†Ô∏è –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —ç—Ç–æ—Ç —á–∞—Ç (–∏ —Ç–µ–º—É, –µ—Å–ª–∏ –ø—Ä–∏–º–µ–Ω–∏–º–æ).");
        } else {
          await ctx.reply(`‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º: ${error.message}`);
        }
      } else {
        await ctx.reply("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
      }
    }
  } else {
    await ctx.reply("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –∏–ª–∏ –≤–≤–æ–¥. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã.");
  }
}