import { Bot, InlineKeyboard, Keyboard, Context } from "grammy"; // –î–æ–±–∞–≤–ª–µ–Ω Context –¥–ª—è —Ç–∏–ø–∏–∑–∞—Ü–∏–∏
import { config } from "dotenv";
import { PrismaClient } from "@prisma/client";

config(); // –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
export const bot = new Bot(process.env.BOT_TOKEN!);
const prisma = new PrismaClient(); // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ Prisma

// --- –í–´–ù–û–°–ò–ú –õ–û–ì–ò–ö–£ –ö–û–ú–ê–ù–î –í –û–¢–î–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ---

async function handleStartCommand(ctx: Context) {
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ ctx.from –∏ –µ–≥–æ id
  if (!ctx.from?.id) {
    console.error("handleStartCommand: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.");
    return ctx.reply("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—à ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram.");
  }

  const userId = BigInt(ctx.from.id);
  const userName = ctx.from.username;

  // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ, –µ—Å–ª–∏ –æ–Ω —É–∂–µ –µ—Å—Ç—å
  try {
    await prisma.user.upsert({
      where: { telegramId: userId },
      update: { telegramName: userName || null }, // –û–±–Ω–æ–≤–ª—è–µ–º –∏–º—è, –µ—Å–ª–∏ –æ–Ω–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
      create: {
        telegramId: userId,
        telegramName: userName || null,
      },
    });
    console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} (${userName}) –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω/–æ–±–Ω–æ–≤–ª–µ–Ω.`);
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", error);
    await ctx.reply("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–∞—Å –≤ —Å–∏—Å—Ç–µ–º–µ.");
    return; // –ü—Ä–µ–∫—Ä–∞—â–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  }

  // –°–æ–∑–¥–∞–µ–º ReplyKeyboard —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º–∏ –Ω–∞–¥–ø–∏—Å—è–º–∏ –∏ resize_keyboard
  const replyMarkup = {
    keyboard: [
      [{ text: "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π" }], // –î—Ä—É–∂–µ–ª—é–±–Ω–∞—è –Ω–∞–¥–ø–∏—Å—å
      [{ text: "üìã –ú–æ–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏" }],      // –î—Ä—É–∂–µ–ª—é–±–Ω–∞—è –Ω–∞–¥–ø–∏—Å—å
      [{ text: "‚ùì –ü–æ–º–æ—â—å" }],                // –î—Ä—É–∂–µ–ª—é–±–Ω–∞—è –Ω–∞–¥–ø–∏—Å—å
    ],
    resize_keyboard: true, // –î–µ–ª–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ –º–µ–Ω–µ–µ "—Ç–æ–ª—Å—Ç—ã–º–∏"
    one_time_keyboard: false, // –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ—Å—Ç–∞–µ—Ç—Å—è –Ω–∞ –≤–∏–¥—É
  };

  await ctx.reply("üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ GitHub –∫–æ–º–º–∏—Ç–∞—Ö. –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:", {
    reply_markup: replyMarkup,
  });
}

async function handleHelpCommand(ctx: Context) {
  await ctx.reply("üìö –ö–æ–º–∞–Ω–¥—ã:\n/start ‚Äî –∑–∞–ø—É—Å—Ç–∏—Ç—å\n‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π ‚Äî –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π\nüìã –ú–æ–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ ‚Äî —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤");
}

async function handleAddRepoCommand(ctx: Context) {
  await ctx.reply("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –∏–º—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è (–ø—Ä–∏–º–µ—Ä: user/my-repo):");
}

async function handleMyRepoCommand(ctx: Context) {
  console.log("--- –ù–∞—á–∞–ª–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è handleMyRepoCommand ---");

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ ctx.from –∏ –µ–≥–æ id
  if (!ctx.from?.id) {
    console.error("handleMyRepoCommand: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.");
    return ctx.reply("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—à ID.");
  }

  const telegramId = BigInt(ctx.from.id);
  console.log(`–ü–æ–ª—É—á–µ–Ω telegramId: ${telegramId}`);

  try {
    const user = await prisma.user.findUnique({
      where: { telegramId },
      include: {
        repositories: { // –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —ç—Ç–∞ —Å–≤—è–∑—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –≤–∞—à–µ–π Prisma —Å—Ö–µ–º–µ
          include: { repository: true }, // –ò —ç—Ç–∞ –≤–ª–æ–∂–µ–Ω–Ω–∞—è —Å–≤—è–∑—å —Ç–∞–∫–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        },
      },
    });

    console.log("–†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ Prisma:", user);

    // –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏ –µ—Å—Ç—å –ª–∏ —É –Ω–µ–≥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
    if (!user || user.repositories.length === 0) {
      console.log("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É –Ω–µ–≥–æ –Ω–µ—Ç —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ.");
      return ctx.reply("üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤.");
    }

    // –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å–ø–∏—Å–∫–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤
    const text = user.repositories
      .map((ru, i) => `üîπ ${i + 1}. [${ru.repository.fullName}](${ru.repository.githubUrl})`) // –î–æ–±–∞–≤–ª–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ GitHub
      .join("\n");

    console.log("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤:\n", text);
    await ctx.reply(`üì¶ –í–∞—à–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏:\n${text}`, {
      parse_mode: "Markdown", // –ß—Ç–æ–±—ã —Å—Å—ã–ª–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–∞–ª–∏—Å—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
      // disable_web_page_preview: true, // –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Å—Å—ã–ª–æ–∫, —á—Ç–æ–±—ã –Ω–µ –∑–∞–≥—Ä–æ–º–æ–∂–¥–∞—Ç—å —á–∞—Ç
    });
    console.log("--- –°–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è–º–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ---");

  } catch (error) {
    console.error("‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ handleMyRepoCommand:", error);
    await ctx.reply("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
  }
  console.log("--- –ö–æ–Ω–µ—Ü –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è handleMyRepoCommand ---");
}

// --- –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –û–ë–†–ê–ë–û–¢–ß–ò–ö–û–í –ö–û–ú–ê–ù–î ---
bot.command("start", handleStartCommand);
bot.command("help", handleHelpCommand);
bot.command("addrepo", handleAddRepoCommand);
bot.command("myrepo", handleMyRepoCommand);


// --- –û–ë–†–ê–ë–û–¢–ß–ò–ö message:text (–¥–ª—è –≤–≤–æ–¥–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –∏ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫) ---
bot.on("message:text", async (ctx) => {
  const input = ctx.message.text?.trim();

  // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–º –æ–¥–Ω–æ–π –∏–∑ –∫–Ω–æ–ø–æ–∫
  if (input === "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π") {
    return await handleAddRepoCommand(ctx);
  }
  if (input === "üìã –ú–æ–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏") {
    return await handleMyRepoCommand(ctx);
  }
  if (input === "‚ùì –ü–æ–º–æ—â—å") {
    return await handleHelpCommand(ctx);
  }

  // 2. –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏, –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π –∫–æ–º–∞–Ω–¥–æ–π (—Ç–∏–ø–∞ /addrepo, –≤–≤–µ–¥–µ–Ω–Ω–æ–π –≤—Ä—É—á–Ω—É—é)
  if (input?.startsWith("/")) {
    console.log(`–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ ${input}, –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ bot.command()`);
    return; // –í—ã—Ö–æ–¥–∏–º, —Ç–∞–∫ –∫–∞–∫ –∫–æ–º–∞–Ω–¥—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è bot.command() —Ö–µ–Ω–¥–ª–µ—Ä–∞–º–∏
  }

  // 3. –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –∫–Ω–æ–ø–∫–∞ –∏ –Ω–µ –∫–æ–º–∞–Ω–¥–∞, —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ —ç—Ç–æ –≤–≤–æ–¥ –∏–º–µ–Ω–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
  console.log(`–ü–æ–ª—É—á–µ–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–≤–æ–∑–º–æ–∂–Ω–æ, –∏–º—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è): ${input}`);

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —á–∞—Ç–∞
  if (!ctx.from?.id || !ctx.chat?.id) {
    console.error("message:text: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ —á–∞—Ç–∞.");
    return ctx.reply("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—à ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ —á–∞—Ç–∞.");
  }

  const telegramId = BigInt(ctx.from.id);
  const chatId = BigInt(ctx.chat.id);

  // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∞ –ø–æ–ª–Ω–æ–≥–æ –∏–º–µ–Ω–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è (user/repo-name)
  if (!input || !input.match(/^[a-zA-Z0-9_.-]+\/[a-zA-Z0-9_.-]+$/)) {
    return ctx.reply("‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è. –§–æ—Ä–º–∞—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å `–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å/–∏–º—è-—Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è` (–ø—Ä–∏–º–µ—Ä: `octocat/Spoon-Knife`).", {
      parse_mode: "Markdown",
    });
  }

  const fullName = input;
  const githubUrl = `https://github.com/${fullName}`;
  const name = fullName.split("/").pop()!; // –ò–º—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –±–µ–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

  try {
    // –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –Ω–∞—Ö–æ–¥–∏–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    const repo = await prisma.repository.upsert({
      where: { fullName },
      update: {
        name,
        githubUrl,
        chatId, // –û–±–Ω–æ–≤–ª—è–µ–º chatId, –µ—Å–ª–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      },
      create: {
        name,
        fullName,
        githubUrl,
        chatId,
        // threadId –∏ webhookId –ø–æ–∫–∞ –Ω–µ –∑–∞–ø–æ–ª–Ω—è–µ–º
      },
    });
    console.log(`–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π ${fullName} upserted. ID: ${repo.id}`);

    // –ü—Ä–∏–≤—è–∑–∫–∞ —á–∞—Ç–∞ –∫ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—é
    await prisma.chatBinding.upsert({
      where: {
        repositoryId_chatId: {
          repositoryId: repo.id,
          chatId: chatId,
        },
      },
      update: {},
      create: {
        repositoryId: repo.id,
        chatId: chatId,
      },
    });
    console.log(`–°–≤—è–∑–∫–∞ —á–∞—Ç–∞ ${chatId} —Å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–º ${repo.id} upserted.`);

    // –ü—Ä–∏–≤—è–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—é
    const user = await prisma.user.findUnique({
      where: { telegramId },
    });

    if (user) {
      await prisma.repositoryUser.upsert({
        where: {
          userId_repositoryId: {
            userId: user.id,
            repositoryId: repo.id,
          },
        },
        update: {},
        create: {
          userId: user.id,
          repositoryId: repo.id,
        },
      });
      console.log(`–°–≤—è–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id} —Å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–º ${repo.id} upserted.`);
    } else {
      console.warn(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å telegramId ${telegramId} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –∫ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—é.`);
      // –í–æ–∑–º–æ–∂–Ω–æ, —Å—Ç–æ–∏—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–¥–µ—Å—å, –µ—Å–ª–∏ –æ–Ω –ø–æ—á–µ–º—É-—Ç–æ –Ω–µ –±—ã–ª –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω —Ä–∞–Ω–µ–µ.
    }

    await ctx.reply(`‚úÖ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π *${fullName}* –¥–æ–±–∞–≤–ª–µ–Ω –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è!`, {
      parse_mode: "Markdown",
      // disable_web_page_preview: true, // –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –¥–ª—è —á–∏—Å—Ç–æ—Ç—ã
    });
    console.log(`–°–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è ${fullName} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.`);
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è:", error);
    if (error instanceof Error && error.message.includes('Unique constraint failed')) {
        await ctx.reply("‚ö†Ô∏è –û—à–∏–±–∫–∞: –≠—Ç–æ—Ç —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —É–∂–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è –≤ —ç—Ç–æ–º —á–∞—Ç–µ –∏–ª–∏ –≤—ã —É–∂–µ –¥–æ–±–∞–≤–∏–ª–∏ –µ–≥–æ.");
    } else {
        await ctx.reply("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–º—è –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
    }
  }
});


// --- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò callbackQuery (–û—Å—Ç–∞—é—Ç—Å—è –¥–ª—è InlineKeyboard, –µ—Å–ª–∏ –æ–Ω–∞ –≥–¥–µ-—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è) ---
// –í –≤–∞—à–µ–º —Ç–µ–∫—É—â–µ–º –∫–æ–¥–µ InlineKeyboard –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è. –ï—Å–ª–∏ –æ–Ω–∞ –≤–∞–º –Ω–µ –Ω—É–∂–Ω–∞, —ç—Ç–∏ –±–ª–æ–∫–∏ –º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å.

bot.callbackQuery("add_repo", async (ctx) => {
  await ctx.answerCallbackQuery(); // –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ callbackQuery
  await ctx.reply("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –∏–º—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è (–ø—Ä–∏–º–µ—Ä: user/my-repo):");
});

bot.callbackQuery("my_repo", async (ctx) => {
  await ctx.answerCallbackQuery();

  if (!ctx.from?.id) {
    return ctx.reply("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—à ID.");
  }

  const telegramId = BigInt(ctx.from.id);
  try {
    const user = await prisma.user.findUnique({
      where: { telegramId },
      include: {
        repositories: { include: { repository: true } },
      },
    });

    if (!user || user.repositories.length === 0) {
      return ctx.reply("üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤.");
    }

    const text = user.repositories
      .map((ru, i) => `üîπ ${i + 1}. [${ru.repository.fullName}](${ru.repository.githubUrl})`)
      .join("\n");

    await ctx.reply(`üì¶ –í–∞—à–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏:\n${text}`, {
      parse_mode: "Markdown",
      // disable_web_page_preview: true,
    });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –≤ callbackQuery 'my_repo':", error);
    await ctx.reply("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤ (callback). –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
  }
});

bot.callbackQuery("help", async (ctx) => {
  await ctx.answerCallbackQuery();
  await ctx.reply("üìö –ö–æ–º–∞–Ω–¥—ã:\n/start ‚Äî –∑–∞–ø—É—Å—Ç–∏—Ç—å\n‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π ‚Äî –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π\nüìã –ú–æ–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ ‚Äî —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤");
});

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.start();