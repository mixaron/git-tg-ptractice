import { Bot, Keyboard, Context, InlineKeyboard } from "grammy"; // –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ InlineKeyboard –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω
import { config } from "dotenv";
import { PrismaClient } from "@prisma/client";

config(); // –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
export const bot = new Bot(process.env.BOT_TOKEN!); // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
const prisma = new PrismaClient(); // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ Prisma

// --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ (–•–µ–ª–ø–µ—Ä—ã) ---

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ Telegram ID, –≤–∫–ª—é—á–∞—è –µ–≥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏.
 * @param telegramId ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram (BigInt).
 * @returns –û–±—ä–µ–∫—Ç User —Å –≤–∫–ª—é—á–µ–Ω–Ω—ã–º–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è–º–∏ –∏–ª–∏ null.
 */
async function getUserWithRepos(telegramId: bigint) {
  return prisma.user.findUnique({
    where: { telegramId },
    include: {
      repositories: { // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—É—é —Ç–∞–±–ª–∏—Ü—É RepositoryUser
        include: { repository: true }, // –ò —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –Ω–∏–º–∏ Repository
      },
    },
  });
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —á–∞—Ç–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ.
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ, –µ—Å–ª–∏ ID –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.
 * @param ctx –ö–æ–Ω—Ç–µ–∫—Å—Ç Grammys.
 * @returns –û–±—ä–µ–∫—Ç —Å userId –∏ chatId (–º–æ–≥—É—Ç –±—ã—Ç—å null, –µ—Å–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç).
 */
function checkContextIds(ctx: Context): { userId: bigint | null; chatId: bigint | null } {
  const userId = ctx.from?.id ? BigInt(ctx.from.id) : null;
  const chatId = ctx.chat?.id ? BigInt(ctx.chat.id) : null;

  if (userId === null) {
    ctx.reply("‚ö†Ô∏è –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—à ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram.");
  }
  if (chatId === null) {
    ctx.reply("‚ö†Ô∏è –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ID —á–∞—Ç–∞.");
  }
  return { userId, chatId };
}

// --- –§–£–ù–ö–¶–ò–ò –û–ë–†–ê–ë–û–¢–ß–ò–ö–û–í –ö–û–ú–ê–ù–î ---

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start. –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤—ã–≤–æ–¥–∏—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.
 * @param ctx –ö–æ–Ω—Ç–µ–∫—Å—Ç Grammys.
 */
async function handleStartCommand(ctx: Context) {
  const { userId } = checkContextIds(ctx);
  if (userId === null) return; // –í—ã—Ö–æ–¥, –µ—Å–ª–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç

  const userName = ctx.from?.username;

  try {
    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ –∏–º—è
    await prisma.user.upsert({
      where: { telegramId: userId },
      update: { telegramName: userName || null },
      create: { telegramId: userId, telegramName: userName || null },
    });
    console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} (${userName || 'N/A'}) –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω/–æ–±–Ω–æ–≤–ª–µ–Ω.`);
  } catch (e) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", e);
    return ctx.reply("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–∞—Å –≤ —Å–∏—Å—Ç–µ–º–µ.");
  }

  // –°–æ–∑–¥–∞–µ–º ReplyKeyboard (–ø–æ—Å—Ç–æ—è–Ω–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –Ω–∞–¥ –ø–æ–ª–µ–º –≤–≤–æ–¥–∞)
  const replyMarkup = {
    keyboard: [
      [{ text: "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π" }],
      [{ text: "üìã –ú–æ–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏" }],
      [{ text: "‚ùì –ü–æ–º–æ—â—å" }],
    ],
    resize_keyboard: true, // –î–µ–ª–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ –∫–æ–º–ø–∞–∫—Ç–Ω–µ–µ
    one_time_keyboard: false, // –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ—Å—Ç–∞–µ—Ç—Å—è –≤–∏–¥–∏–º–æ–π
  };

  await ctx.reply("üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ GitHub –∫–æ–º–º–∏—Ç–∞—Ö. –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:", { reply_markup: replyMarkup });
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /help. –í—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥–∞—Ö.
 * @param ctx –ö–æ–Ω—Ç–µ–∫—Å—Ç Grammys.
 */
async function handleHelpCommand(ctx: Context) {
  await ctx.reply(
    "üìö –ö–æ–º–∞–Ω–¥—ã:\n" +
    "/start ‚Äî –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n" +
    "/addrepo ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è\n" +
    "/myrepo ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤\n" +
    "/delrepo ‚Äî —É–¥–∞–ª–∏—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π" // –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –ø–æ–º–æ—â–∏
  );
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /addrepo. –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–º—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è.
 * @param ctx –ö–æ–Ω—Ç–µ–∫—Å—Ç Grammys.
 */
async function handleAddRepoCommand(ctx: Context) {
  await ctx.reply("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –∏–º—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è (–ø—Ä–∏–º–µ—Ä: `user/my-repo`):", { parse_mode: "Markdown" });
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /myrepo. –í—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç, –±–µ–∑ –∫–Ω–æ–ø–æ–∫).
 * @param ctx –ö–æ–Ω—Ç–µ–∫—Å—Ç Grammys.
 */
async function handleMyRepoCommand(ctx: Context) {
  const { userId } = checkContextIds(ctx);
  if (userId === null) return;

  const user = await getUserWithRepos(userId);

  if (!user || user.repositories.length === 0) {
    return ctx.reply("üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤.");
  }

  // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤
  const text = user.repositories
    .map((ru, i) => `üîπ ${i + 1}. [${ru.repository.fullName}](${ru.repository.githubUrl})`)
    .join("\n");

  await ctx.reply(`üì¶ –í–∞—à–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏:\n${text}`, { parse_mode: "Markdown" });
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /delrepo. –í—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤ —Å Inline-–∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞.
 * @param ctx –ö–æ–Ω—Ç–µ–∫—Å—Ç Grammys.
 */
async function handleDelRepoCommand(ctx: Context) {
  const { userId, chatId } = checkContextIds(ctx);
  if (userId === null || chatId === null) return;

  const user = await getUserWithRepos(userId);

  if (!user || user.repositories.length === 0) {
    return ctx.reply("üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.");
  }

  const currentThreadId = ctx.message?.message_thread_id || null; // null –¥–ª—è –æ–±—â–µ–≥–æ —á–∞—Ç–∞

  const filteredRepos = [];
  for (const ru of user.repositories) {
    const chatBinding = await prisma.chatBinding.findUnique({
      where: { repositoryId_chatId: { repositoryId: ru.repository.id, chatId: chatId } }
    });

    if (chatBinding) {
      // –õ–æ–≥–∏–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è threadId:
      // - –ï—Å–ª–∏ —Ç–µ–∫—É—â–∏–π —á–∞—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ç–æ–ø–∏–∫–æ–º (currentThreadId === null),
      //   —Ç–æ –ø—Ä–∏–≤—è–∑–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ç–∞–∫–∂–µ –±–µ–∑ threadId (chatBinding.threadId === null).
      // - –ï—Å–ª–∏ —Ç–µ–∫—É—â–∏–π —á–∞—Ç —è–≤–ª—è–µ—Ç—Å—è —Ç–æ–ø–∏–∫–æ–º (currentThreadId !== null),
      //   —Ç–æ –ø—Ä–∏–≤—è–∑–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∫ —ç—Ç–æ–º—É –∂–µ —Ç–æ–ø–∏–∫—É (chatBinding.threadId === currentThreadId).
      const isMatchingThread = (currentThreadId === null && chatBinding.threadId === null) ||
                               (currentThreadId !== null && chatBinding.threadId === currentThreadId);
      
      if (isMatchingThread) {
        filteredRepos.push(ru.repository);
      }
    }
  }

  if (filteredRepos.length === 0) {
    return ctx.reply("üì≠ –í —ç—Ç–æ–º —á–∞—Ç–µ/—Ç–µ–º–µ —É –≤–∞—Å –Ω–µ—Ç –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.");
  }

  const inlineKeyboard = new InlineKeyboard();
  for (const repo of filteredRepos) {
    // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –∏ –∑–∞—Ç–µ–º –¥–æ–±–∞–≤–ª—è–µ–º –µ–µ –≤ —Ä—è–¥
    const button = { text: repo.fullName, callback_data: `select_to_delete_repo_${repo.id}` };
    inlineKeyboard.row(button);
  }

  await ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", { reply_markup: inlineKeyboard });
}

// --- –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –û–ë–†–ê–ë–û–¢–ß–ò–ö–û–í –ö–û–ú–ê–ù–î ---
bot.command("start", handleStartCommand);
bot.command("help", handleHelpCommand);
bot.command("addrepo", handleAddRepoCommand);
bot.command("myrepo", handleMyRepoCommand);
bot.command("delrepo", handleDelRepoCommand); // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥—ã /delrepo

// --- –û–ë–†–ê–ë–û–¢–ö–ê –¢–ï–ö–°–¢–û–í–´–• –°–û–û–ë–©–ï–ù–ò–ô ---
bot.on("message:text", async (ctx) => {
  const input = ctx.message.text?.trim();
  if (!input || input.startsWith("/")) return; // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ø—É—Å—Ç—ã–µ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ ReplyKeyboard (–≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é)
  if (input === "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π") return handleAddRepoCommand(ctx);
  if (input === "üìã –ú–æ–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏") return handleMyRepoCommand(ctx);
  if (input === "‚ùì –ü–æ–º–æ—â—å") return handleHelpCommand(ctx);

  const { userId, chatId } = checkContextIds(ctx);
  if (userId === null || chatId === null) return;

  // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç user –∑–¥–µ—Å—å, —Ç–∞–∫ –∫–∞–∫ –æ–Ω –Ω—É–∂–µ–Ω –¥–ª—è prisma.repositoryUser.upsert
  const user = await prisma.user.findUnique({ where: { telegramId: userId } });
  if (!user) {
      console.error(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID ${userId} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è.`);
      return ctx.reply("‚ö†Ô∏è –û—à–∏–±–∫–∞: –≤–∞—à –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start.");
  }

  // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∞ –ø–æ–ª–Ω–æ–≥–æ –∏–º–µ–Ω–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è (user/repo-name)
  if (!input.match(/^[\w.-]+\/[\w.-]+$/)) { // _.\- –ø–æ–∑–≤–æ–ª—è–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, _, ., -
    return ctx.reply(
      "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–º–µ–Ω–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å/–∏–º—è-—Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è` (–ø—Ä–∏–º–µ—Ä: `octocat/Spoon-Knife`).",
      { parse_mode: "Markdown" }
    );
  }

  const fullName = input;
  const githubUrl = `https://github.com/${fullName}`;
  const name = fullName.split("/").pop()!; // –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ—Ä–æ—Ç–∫–æ–µ –∏–º—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è

  try {
    let finalThreadId: number | null = null; // –ò—Ç–æ–≥–æ–≤—ã–π threadId –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è

    // –õ–æ–≥–∏–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è/–ø–æ–ª—É—á–µ–Ω–∏—è threadId –¥–ª—è –≥—Ä—É–ø–ø
    if (ctx.chat.type === "group" || ctx.chat.type === "supergroup") {
        if (ctx.message?.message_thread_id) { // –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏—à–ª–æ –∏–∑ —Ç–æ–ø–∏–∫–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ threadId
            finalThreadId = ctx.message.message_thread_id;
        } else {
            // –ò–Ω–∞—á–µ, –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ø—Ä–∏–≤—è–∑–∫—É –∫ —Ç–æ–ø–∏–∫—É –¥–ª—è —ç—Ç–æ–≥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –≤ —ç—Ç–æ–º —á–∞—Ç–µ
            const existingChatBinding = await prisma.chatBinding.findFirst({
                where: {
                    chatId: chatId,
                    repository: { fullName: fullName }
                }
            });

            // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: –Ø–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ existingChatBinding !== null
            if (existingChatBinding !== null && existingChatBinding.threadId !== null) {
                finalThreadId = existingChatBinding.threadId;
                await ctx.reply(`–≠—Ç–æ—Ç —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —É–∂–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è –≤ —Ç–æ–ø–∏–∫–µ: [${name}](https://t.me/c/${chatId.toString().substring(4)}/${finalThreadId})`, {
                    parse_mode: "Markdown",
                    reply_to_message_id: ctx.message?.message_id
                });
            } else { // –ï—Å–ª–∏ existingChatBinding null –∏–ª–∏ threadId null, —Ç–æ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ç–æ–ø–∏–∫
                try {
                    const topic = await bot.api.createForumTopic(Number(chatId), name);
                    finalThreadId = topic.message_thread_id;
                    await ctx.reply(`üìä –°–æ–∑–¥–∞–Ω —Ç–æ–ø–∏–∫ –¥–ª—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è: [${name}](https://t.me/c/${chatId.toString().substring(4)}/${finalThreadId})`, {
                        parse_mode: "Markdown",
                        reply_to_message_id: ctx.message?.message_id
                    });
                } catch (topicError: any) {
                    console.warn("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–æ–ø–∏–∫ —Ñ–æ—Ä—É–º–∞:", topicError.message);
                    await ctx.reply("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ç–æ–ø–∏–∫ —Ñ–æ—Ä—É–º–∞ –¥–ª—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è. –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –±—É–¥–µ—Ç –≤–µ—Å—Ç–∏—Å—å –≤ —Ç–µ–∫—É—â–µ–º —á–∞—Ç–µ.");
                    finalThreadId = null; // –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ threadId
                }
            }
        }
    }
    // –î–ª—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö —á–∞—Ç–æ–≤ finalThreadId –æ—Å—Ç–∞–Ω–µ—Ç—Å—è null

    // --- –°–æ—Ö—Ä–∞–Ω—è–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π ---
    const repo = await prisma.repository.upsert({
      where: { fullName },
      update: { name, githubUrl, chatId, threadId: finalThreadId },
      create: { name, fullName, githubUrl, chatId, threadId: finalThreadId },
    });

    console.log(`‚úÖ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π ${repo.fullName} (ID: ${repo.id}), threadId: ${repo.threadId} upserted.`);

    // --- –ü—Ä–∏–≤—è–∑–∫–∞ —á–∞—Ç–∞ –∫ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—é ---
    await prisma.chatBinding.upsert({
      where: { repositoryId_chatId: { repositoryId: repo.id, chatId } },
      update: { threadId: finalThreadId },
      create: { repositoryId: repo.id, chatId, threadId: finalThreadId },
    });
    console.log(`–°–≤—è–∑–∫–∞ —á–∞—Ç–∞ ${chatId} —Å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–º ${repo.id} (threadId: ${finalThreadId}) upserted.`);

    // –¢–µ–ø–µ—Ä—å user –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –µ–≥–æ id –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
    await prisma.repositoryUser.upsert({
      where: { userId_repositoryId: { userId: user.id, repositoryId: repo.id } },
      update: {},
      create: { userId: user.id, repositoryId: repo.id },
    });
    console.log(`–°–≤—è–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id} —Å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–º ${repo.id} upserted.`);

    await ctx.reply(`‚úÖ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π *${fullName}* –¥–æ–±–∞–≤–ª–µ–Ω –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è!`, { parse_mode: "Markdown" });
  } catch (error: any) {
    console.error("–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è:", error);
    await ctx.reply(error.message?.includes("Unique constraint failed") ? "‚ö†Ô∏è –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —ç—Ç–æ—Ç —á–∞—Ç." : "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
  }
});


// --- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò CALLBACK QUERY ---

bot.callbackQuery(/^select_to_delete_repo_(\d+)$/, async (ctx) => {
  await ctx.answerCallbackQuery();
  const repoId = parseInt(ctx.match![1]);

  if (isNaN(repoId)) return ctx.reply("‚ö†Ô∏è –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π ID —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è.");

  try {
    const repoToDelete = await prisma.repository.findUnique({ where: { id: repoId } });
    if (!repoToDelete) return ctx.reply("–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω.");

    const confirmationKeyboard = new InlineKeyboard()
      .text("‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", `confirm_delete_${repoId}`)
      .text("‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∞", `cancel_delete_${repoId}`);

    await ctx.editMessageText(`–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π *${repoToDelete.fullName}*?`, {
      reply_markup: confirmationKeyboard, parse_mode: "Markdown",
    });
  } catch (e) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –∫ —É–¥–∞–ª–µ–Ω–∏—é:", e);
    await ctx.reply("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –∫ —É–¥–∞–ª–µ–Ω–∏—é.");
  }
});

bot.callbackQuery(/^confirm_delete_(\d+)$/, async (ctx) => {
  await ctx.answerCallbackQuery("–£–¥–∞–ª—è–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π...");
  const repoId = parseInt(ctx.match![1]);

  const { userId, chatId } = checkContextIds(ctx);
  if (isNaN(repoId) || userId === null || chatId === null) return;

  try {
    const user = await prisma.user.findUnique({ where: { telegramId: userId } });
    if (!user) return ctx.reply("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ.");

    const repositoryUser = await prisma.repositoryUser.findUnique({
        where: {
            userId_repositoryId: {
                userId: user.id,
                repositoryId: repoId
            }
        },
        include: {
            repository: true
        }
    });

    if (!repositoryUser) {
        return ctx.reply("–≠—Ç–æ—Ç —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–µ —Å–≤—è–∑–∞–Ω —Å –≤–∞—à–∏–º –∞–∫–∫–∞—É–Ω—Ç–æ–º.");
    }

    const repoFullName = repositoryUser.repository.fullName;

    await prisma.repositoryUser.delete({
        where: {
            userId_repositoryId: {
                userId: user.id,
                repositoryId: repoId
            }
        }
    });

    const messageThreadId = Number(ctx.callbackQuery.message?.message_thread_id || 0);
    const currentThreadId = messageThreadId > 0 ? messageThreadId : null;

    await prisma.chatBinding.deleteMany({
        where: {
            repositoryId: repoId,
            chatId: chatId,
            threadId: currentThreadId,
        }
    });

    await ctx.editMessageText(`‚úÖ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π *${repoFullName}* —É–¥–∞–ª–µ–Ω –∏–∑ –≤–∞—à–µ–≥–æ —Å–ø–∏—Å–∫–∞.`, { parse_mode: "Markdown" });
  } catch (e) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è:", e);
    await ctx.reply("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
  }
});

bot.callbackQuery(/^cancel_delete_(\d+)$/, async (ctx) => {
  await ctx.answerCallbackQuery("–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.");
  const repoId = parseInt(ctx.match![1]);

  try {
    const repoInfo = await prisma.repository.findUnique({ where: { id: repoId }, select: { fullName: true } });
    const repoFullName = repoInfo ? repoInfo.fullName : "—Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π";
    await ctx.editMessageText(`‚ùå –£–¥–∞–ª–µ–Ω–∏–µ *${repoFullName}* –æ—Ç–º–µ–Ω–µ–Ω–æ.`, { parse_mode: "Markdown" });
  } catch (e) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ —É–¥–∞–ª–µ–Ω–∏—è:", e);
    await ctx.reply("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ.");
  }
});

// --- –ó–ê–ü–£–°–ö –ë–û–¢–ê ---
bot.start();
