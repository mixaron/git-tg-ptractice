import { Bot, Keyboard, Context } from "grammy";
import { config } from "dotenv";
import { PrismaClient } from "@prisma/client";

config(); // –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
export const bot = new Bot(process.env.BOT_TOKEN!);
const prisma = new PrismaClient(); // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ Prisma

// --- –ö–û–ú–ê–ù–î–´ ---
async function handleStartCommand(ctx: Context) {
  if (!ctx.from?.id) return ctx.reply("‚ö†Ô∏è –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—à ID.");
  const userId = BigInt(ctx.from.id);
  const userName = ctx.from.username;

  try {
    await prisma.user.upsert({
      where: { telegramId: userId },
      update: { telegramName: userName || null },
      create: {
        telegramId: userId,
        telegramName: userName || null,
      },
    });
  } catch (e) {
    console.error("–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:", e);
    return ctx.reply("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.");
  }

  const replyMarkup = {
    keyboard: [
      [{ text: "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π" }],
      [{ text: "üìã –ú–æ–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏" }],
      [{ text: "‚ùì –ü–æ–º–æ—â—å" }],
    ],
    resize_keyboard: true,
  };

  await ctx.reply("üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ GitHub –∫–æ–º–º–∏—Ç–∞—Ö.", {
    reply_markup: replyMarkup,
  });
}

async function handleHelpCommand(ctx: Context) {
  await ctx.reply("üìö –ö–æ–º–∞–Ω–¥—ã:\n/start ‚Äî –∑–∞–ø—É—Å–∫\n/addrepo ‚Äî –¥–æ–±–∞–≤–∏—Ç—å\n/myrepo ‚Äî —Å–ø–∏—Å–æ–∫ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤");
}

async function handleAddRepoCommand(ctx: Context) {
  await ctx.reply("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –∏–º—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è (–ø—Ä–∏–º–µ—Ä: user/my-repo):");
}

async function handleMyRepoCommand(ctx: Context) {
  if (!ctx.from?.id) return ctx.reply("‚ö†Ô∏è –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—à ID.");

  const telegramId = BigInt(ctx.from.id);
  try {
    const user = await prisma.user.findUnique({
      where: { telegramId },
      include: {
        repositories: {
          include: { repository: true },
        },
      },
    });

    if (!user || user.repositories.length === 0) {
      return ctx.reply("üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤.");
    }

    const text = user.repositories
      .map((ru, i) => `üîπ ${i + 1}. [${ru.repository.fullName}](${ru.repository.githubUrl})`)
      .join("\n");

    await ctx.reply(`üì¶ –í–∞—à–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏:\n${text}`, {
      parse_mode: "Markdown",
    });
  } catch (e) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤:", e);
    await ctx.reply("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤.");
  }
}

bot.command("start", handleStartCommand);
bot.command("help", handleHelpCommand);
bot.command("addrepo", handleAddRepoCommand);
bot.command("myrepo", handleMyRepoCommand);



bot.on("message:text", async (ctx) => {
  const input = ctx.message.text?.trim();
  if (!input) return;

  if (input === "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π") return handleAddRepoCommand(ctx);
  if (input === "üìã –ú–æ–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏") return handleMyRepoCommand(ctx);
  if (input === "‚ùì –ü–æ–º–æ—â—å") return handleHelpCommand(ctx);
  if (input.startsWith("/")) return;

  if (!ctx.from?.id || !ctx.chat?.id) {
    return ctx.reply("‚ö†Ô∏è –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—à Telegram ID –∏–ª–∏ —á–∞—Ç.");
  }

  const telegramId = BigInt(ctx.from.id);
  const chatId = BigInt(ctx.chat.id);

  if (!input.match(/^[\w.-]+\/[\w.-]+$/)) {
    return ctx.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `user/repo-name`.", {
      parse_mode: "Markdown",
    });
  }

  const fullName = input;
  const githubUrl = `https://github.com/${fullName}`;
  const name = fullName.split("/").pop()!;

  try {
    // --- –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ç–æ–ø–∏–∫ –≤ —Ñ–æ—Ä—É–º–µ ---
    const topic = await bot.api.createForumTopic(Number(chatId), name);
    const threadId = topic.message_thread_id;

    // --- –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π ---
    const repo = await prisma.repository.upsert({
      where: { fullName },
      update: {
        name,
        githubUrl,
        chatId,
        threadId,
      },
      create: {
        name,
        fullName,
        githubUrl,
        chatId,
        threadId,
      },
    });

    console.log(`‚úÖ Repo: ${repo.fullName}, threadId: ${threadId}`);

    // --- –ü—Ä–∏–≤—è–∑–∫–∞ —á–∞—Ç–∞ ---
    await prisma.chatBinding.upsert({
      where: {
        repositoryId_chatId: {
          repositoryId: repo.id,
          chatId,
        },
      },
      update: {
        threadId,
      },
      create: {
        repositoryId: repo.id,
        chatId,
        threadId,
      },
    });

    // --- –ü—Ä–∏–≤—è–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
    const user = await prisma.user.findUnique({ where: { telegramId } });
    if (user) {
      await prisma.repositoryUser.upsert({
        where: {
          userId_repositoryId: {
            userId: user.id,
            repositoryId: repo.id,
          },
        },
        update: {},
        create: {
          userId: user.id,
          repositoryId: repo.id,
        },
      });
    }

    await ctx.reply(`‚úÖ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π *${fullName}* –¥–æ–±–∞–≤–ª–µ–Ω –∏ —Å–æ–∑–¥–∞–Ω —Ç–æ–ø–∏–∫ —Ñ–æ—Ä—É–º–∞!`, {
      parse_mode: "Markdown",
    });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:", error);
    const msg =
      error instanceof Error && error.message.includes("Unique constraint")
        ? "‚ö†Ô∏è –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —ç—Ç–æ—Ç —á–∞—Ç."
        : "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π.";
    await ctx.reply(msg);
  }
});

// --- –ó–ê–ü–£–°–ö –ë–û–¢–ê ---
bot.start();
