import { Bot, Keyboard, Context, InlineKeyboard, session, SessionFlavor } from "grammy";
import { config } from "dotenv";
import { PrismaClient } from "@prisma/client";
import { startWeeklyReportScheduler } from './weeklyReport'; 

config();
startWeeklyReportScheduler();


interface SessionData {
  state?: 'awaiting_github_username' | 'awaiting_repo_name';
}


type MyContext = Context & SessionFlavor<SessionData>;

export const bot = new Bot<MyContext>(process.env.BOT_TOKEN!);
const prisma = new PrismaClient();


bot.use(
  session({
    initial: (): SessionData => ({}),
  })
);


async function getUserWithRepos(telegramId: bigint) {
  return prisma.user.findUnique({
    where: { telegramId },
    include: {
      repositories: {
        include: { repository: true },
      },
    },
  });
}


function checkContextIds(ctx: MyContext): { userId: bigint | null; chatId: bigint | null } {
  const userId = ctx.from?.id ? BigInt(ctx.from.id) : null;
  const chatId = ctx.chat?.id ? BigInt(ctx.chat.id) : null;

  if (userId === null) {
    ctx.reply("‚ö†Ô∏è –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—à ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram.");
  }
  if (chatId === null) {
    ctx.reply("‚ö†Ô∏è –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ID —á–∞—Ç–∞.");
  }
  return { userId, chatId };
}


export async function formatCommitAuthorLink(githubLogin: string, authorName: string = githubLogin): Promise<string> {
  try {
    const user = await prisma.user.findUnique({
      where: { githubLogin: githubLogin },
      select: { telegramName: true, telegramId: true } 
    });

    if (user && user.telegramName) {
      
      return `üë§ @${user.telegramName} (GitHub: [${githubLogin}](https://github.com/${githubLogin}))`;
    } else {
      
      return `üë§ [${authorName}](https://github.com/${githubLogin})`;
    }
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∞–≤—Ç–æ—Ä–∞ –∫–æ–º–º–∏—Ç–∞:", error);
    
    return `üë§ [${authorName}](https://github.com/${githubLogin})`;
  }
}





async function handleStartCommand(ctx: MyContext) {
  const { userId } = checkContextIds(ctx);
  if (userId === null) return;

  const userName = ctx.from?.username;

  try {
    await prisma.user.upsert({
      where: { telegramId: userId },
      update: { telegramName: userName || null },
      create: { telegramId: userId, telegramName: userName || null },
    });
    console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} (${userName || 'N/A'}) –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω/–æ–±–Ω–æ–≤–ª–µ–Ω.`);
  } catch (e) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", e);
    return ctx.reply("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–∞—Å –≤ —Å–∏—Å—Ç–µ–º–µ.");
  }

  const replyMarkup = {
    keyboard: [
      [{ text: "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π" }],
      [{ text: "üìã –ú–æ–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏" }],
      [{ text: "‚ùì –ü–æ–º–æ—â—å" }],
      [{ text: "üîó –ü—Ä–∏–≤—è–∑–∞—Ç—å GitHub" }, { text: "üóëÔ∏è –û—Ç–≤—è–∑–∞—Ç—å GitHub" }], 
      [{ text: "ü§° –û—Ç–≤—è–∑–∞—Ç—å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π" }],
    ],
    resize_keyboard: true,
    one_time_keyboard: false,
  };

  await ctx.reply("üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ GitHub –∫–æ–º–º–∏—Ç–∞—Ö. –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:", { reply_markup: replyMarkup });
}

async function handleHelpCommand(ctx: MyContext) {
  await ctx.reply(
    "üìö –ö–æ–º–∞–Ω–¥—ã:\n" +
    "/start ‚Äî –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n" +
    "/addrepo ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è\n" +
    "/myrepo ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤\n" +
    "/delrepo ‚Äî —É–¥–∞–ª–∏—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π\n" +
    "/linkgithub ‚Äî –ø—Ä–∏–≤—è–∑–∞—Ç—å –≤–∞—à GitHub –Ω–∏–∫–Ω–µ–π–º\n" +
    "/unlinkgithub ‚Äî –æ—Ç–≤—è–∑–∞—Ç—å –≤–∞—à GitHub –Ω–∏–∫–Ω–µ–π–º" 
  );
}

async function handleAddRepoCommand(ctx: MyContext) {
  ctx.session.state = 'awaiting_repo_name';
  await ctx.reply("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –∏–º—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è (–ø—Ä–∏–º–µ—Ä: `user/my-repo`):", { parse_mode: "Markdown" });
}

async function handleMyRepoCommand(ctx: MyContext) {
  const { userId } = checkContextIds(ctx);
  if (userId === null) return;

  const user = await getUserWithRepos(userId);

  if (!user || user.repositories.length === 0) {
    return ctx.reply("üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤.");
  }

  const text = user.repositories
    .map((ru, i) => `üîπ ${i + 1}. [${ru.repository.fullName}](${ru.repository.githubUrl})`)
    .join("\n");

  await ctx.reply(`üì¶ –í–∞—à–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏:\n${text}`, { parse_mode: "Markdown" });
}

async function handleDelRepoCommand(ctx: MyContext) {
  const { userId, chatId } = checkContextIds(ctx);
  if (userId === null || chatId === null) return;

  const user = await getUserWithRepos(userId);

  if (!user || user.repositories.length === 0) {
    return ctx.reply("üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.");
  }

  const currentThreadId = ctx.message?.message_thread_id || null;

  const filteredRepos = [];
  for (const ru of user.repositories) {
    const chatBinding = await prisma.chatBinding.findUnique({
      where: { repositoryId_chatId: { repositoryId: ru.repository.id, chatId: chatId } }
    });

    if (chatBinding) {
      const isMatchingThread = (currentThreadId === null && chatBinding.threadId === null) ||
                               (currentThreadId !== null && chatBinding.threadId === currentThreadId);
      
      if (isMatchingThread) {
        filteredRepos.push(ru.repository);
      }
    }
  }

  if (filteredRepos.length === 0) {
    return ctx.reply("üì≠ –í —ç—Ç–æ–º —á–∞—Ç–µ/—Ç–µ–º–µ —É –≤–∞—Å –Ω–µ—Ç –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.");
  }

  const inlineKeyboard = new InlineKeyboard();
  for (const repo of filteredRepos) {
    const button = { text: repo.fullName, callback_data: `select_to_delete_repo_${repo.id}` };
    inlineKeyboard.row(button);
  }

  await ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", { reply_markup: inlineKeyboard });
}


async function handleLinkGithubCommand(ctx: MyContext) {
  ctx.session.state = 'awaiting_github_username';
  await ctx.reply("üîó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–∏–∫–Ω–µ–π–º –Ω–∞ GitHub:");
}


async function handleUnlinkGithubCommand(ctx: MyContext) {
  const { userId } = checkContextIds(ctx);
  if (userId === null) return;

  try {
    const user = await prisma.user.findUnique({
      where: { telegramId: userId },
      select: { githubLogin: true } 
    });

    if (!user || !user.githubLogin) {
      return ctx.reply("‚ùå –í–∞—à –∞–∫–∫–∞—É–Ω—Ç Telegram –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ GitHub.");
    }

    await prisma.user.update({
      where: { telegramId: userId },
      data: { githubLogin: null },
    });
    return ctx.reply("‚úÖ –í–∞—à GitHub –Ω–∏–∫–Ω–µ–π–º —É—Å–ø–µ—à–Ω–æ –æ—Ç–≤—è–∑–∞–Ω.");
  } catch (e) {
    console.error("–û—à–∏–±–∫–∞ –æ—Ç–≤—è–∑–∫–∏ GitHub –Ω–∏–∫–Ω–µ–π–º–∞:", e);
    return ctx.reply("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤—è–∑–∫–µ GitHub –Ω–∏–∫–Ω–µ–π–º–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
  }
}


bot.command("start", handleStartCommand);
bot.command("help", handleHelpCommand);
bot.command("addrepo", handleAddRepoCommand);
bot.command("myrepo", handleMyRepoCommand);
bot.command("delrepo", handleDelRepoCommand);
bot.command("linkgithub", handleLinkGithubCommand);
bot.command("unlinkgithub", handleUnlinkGithubCommand); 




bot.on("message:text", async (ctx) => {
  const input = ctx.message.text?.trim();
  if (!input) return;

  
  if (input === "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π") {
    return handleAddRepoCommand(ctx);
  }
  if (input === "üìã –ú–æ–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏") {
    return handleMyRepoCommand(ctx);
  }
  if (input === "‚ùì –ü–æ–º–æ—â—å") {
    return handleHelpCommand(ctx);
  }
  if (input === "üîó –ü—Ä–∏–≤—è–∑–∞—Ç—å GitHub") {
    return handleLinkGithubCommand(ctx);
  }
  if (input === "üóëÔ∏è –û—Ç–≤—è–∑–∞—Ç—å GitHub") { 
    return handleUnlinkGithubCommand(ctx);
  }
  if (input === "ü§° –û—Ç–≤—è–∑–∞—Ç—å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π") {
    return handleDelRepoCommand(ctx);
  }

  
  if (input.startsWith("/")) return;

  const { userId, chatId } = checkContextIds(ctx);
  if (userId === null || chatId === null) return;

  
  if (ctx.session.state === 'awaiting_github_username') {
    const githubLogin = input;
    
    if (!githubLogin.match(/^[a-zA-Z0-9]+(?:-[a-zA-Z0-9]+)*$/)) {
      return ctx.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–∏–∫–Ω–µ–π–º–∞ GitHub. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ –¥–µ—Ñ–∏—Å—ã (–Ω–µ –≤ –Ω–∞—á–∞–ª–µ/–∫–æ–Ω—Ü–µ).");
    }

    try {
      await prisma.user.update({
        where: { telegramId: userId },
        data: { githubLogin: githubLogin },
      });
      ctx.session.state = undefined; 
      return ctx.reply(`‚úÖ –í–∞—à GitHub –Ω–∏–∫–Ω–µ–π–º *${githubLogin}* —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω!`, { parse_mode: "Markdown" });
    } catch (e: any) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏–≤—è–∑–∫–∏ GitHub –Ω–∏–∫–Ω–µ–π–º–∞:", e);
      if (e.message?.includes("Unique constraint failed")) {
          return ctx.reply("‚ö†Ô∏è –≠—Ç–æ—Ç –Ω–∏–∫–Ω–µ–π–º GitHub —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –¥—Ä—É–≥–æ–º—É –∞–∫–∫–∞—É–Ω—Ç—É.");
      }
      return ctx.reply("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–≤—è–∑–∫–µ GitHub –Ω–∏–∫–Ω–µ–π–º–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
    }
  }

  if (ctx.session.state === 'awaiting_repo_name') {
    ctx.session.state = undefined; 
    if (!input.match(/^[\w.-]+\/[\w.-]+$/)) {
      return ctx.reply(
        "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–º–µ–Ω–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å/–∏–º—è-—Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è` (–ø—Ä–∏–º–µ—Ä: `octocat/Spoon-Knife`).",
        { parse_mode: "Markdown" }
      );
    }

    const fullName = input;
    const githubUrl = `https://github.com/${fullName}`;
    const name = fullName.split("/").pop()!;

    try {
      let finalThreadId: number | null = null;

      if (ctx.chat.type === "group" || ctx.chat.type === "supergroup") {
          if (ctx.message?.message_thread_id) {
              finalThreadId = ctx.message.message_thread_id;
          } else {
              const existingChatBinding = await prisma.chatBinding.findFirst({
                  where: {
                      chatId: chatId,
                      repository: { fullName: fullName }
                  }
              });

              if (existingChatBinding !== null && existingChatBinding.threadId !== null) {
                  finalThreadId = existingChatBinding.threadId;
                  await ctx.reply(`–≠—Ç–æ—Ç —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —É–∂–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è –≤ —Ç–æ–ø–∏–∫–µ: [${name}](https://t.me/c/${chatId.toString().substring(4)}/${finalThreadId})`, {
                      parse_mode: "Markdown",
                      reply_to_message_id: ctx.message?.message_id
                  });
              } else {
                  try {
                      const topic = await bot.api.createForumTopic(Number(chatId), name);
                      finalThreadId = topic.message_thread_id;
                      await ctx.reply(`üìä –°–æ–∑–¥–∞–Ω —Ç–æ–ø–∏–∫ –¥–ª—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è: [${name}](https://t.me/c/${chatId.toString().substring(4)}/${finalThreadId})`, {
                          parse_mode: "Markdown",
                          reply_to_message_id: ctx.message?.message_id
                      });
                  } catch (topicError: any) {
                      console.warn("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–æ–ø–∏–∫ —Ñ–æ—Ä—É–º–∞:", topicError.message);
                      await ctx.reply("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ç–æ–ø–∏–∫ —Ñ–æ—Ä—É–º–∞ –¥–ª—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è. –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –±—É–¥–µ—Ç –≤–µ—Å—Ç–∏—Å—å –≤ —Ç–µ–∫—É—â–µ–º —á–∞—Ç–µ.");
                      finalThreadId = null;
                  }
              }
          }
      }

      const repo = await prisma.repository.upsert({
        where: { fullName },
        update: { name, githubUrl, chatId, threadId: finalThreadId },
        create: { name, fullName, githubUrl, chatId, threadId: finalThreadId },
      });

      await prisma.chatBinding.upsert({
        where: { repositoryId_chatId: { repositoryId: repo.id, chatId } },
        update: { threadId: finalThreadId },
        create: { repositoryId: repo.id, chatId, threadId: finalThreadId },
      });

      const user = await getUserWithRepos(userId);
      if (user) { 
          await prisma.repositoryUser.upsert({
              where: { userId_repositoryId: { userId: user.id, repositoryId: repo.id } },
              update: {},
              create: { userId: user.id, repositoryId: repo.id },
          });
      }

      await ctx.reply(`‚úÖ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π *${fullName}* –¥–æ–±–∞–≤–ª–µ–Ω –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è!`, { parse_mode: "Markdown" });
    } catch (error: any) {
      console.error("–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è:", error);
      await ctx.reply(error.message?.includes("Unique constraint failed") ? "‚ö†Ô∏è –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —ç—Ç–æ—Ç —á–∞—Ç." : "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
    }
  } else {
      
      await ctx.reply("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –∏–ª–∏ –≤–≤–æ–¥. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã.");
  }
});

bot.callbackQuery(/^select_to_delete_repo_(\d+)$/, async (ctx) => {
  await ctx.answerCallbackQuery();
  const repoId = parseInt(ctx.match![1]);

  if (isNaN(repoId)) return ctx.reply("‚ö†Ô∏è –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π ID —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è.");

  try {
    const repoToDelete = await prisma.repository.findUnique({ where: { id: repoId } });
    if (!repoToDelete) return ctx.reply("–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω.");

    const confirmationKeyboard = new InlineKeyboard()
      .text("‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", `confirm_delete_${repoId}`)
      .text("‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∞", `cancel_delete_${repoId}`);

    await ctx.editMessageText(`–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π *${repoToDelete.fullName}*?`, {
      reply_markup: confirmationKeyboard, parse_mode: "Markdown",
    });
  } catch (e) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –∫ —É–¥–∞–ª–µ–Ω–∏—é:", e);
    await ctx.reply("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –∫ —É–¥–∞–ª–µ–Ω–∏—é.");
  }
});

bot.callbackQuery(/^confirm_delete_(\d+)$/, async (ctx) => {
  await ctx.answerCallbackQuery("–£–¥–∞–ª—è–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π...");
  const repoId = parseInt(ctx.match![1]);

  const { userId, chatId } = checkContextIds(ctx);
  if (isNaN(repoId) || userId === null || chatId === null) return;

  try {
    const user = await prisma.user.findUnique({ where: { telegramId: userId } });
    if (!user) return ctx.reply("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ.");

    const repositoryUser = await prisma.repositoryUser.findUnique({
        where: {
            userId_repositoryId: {
                userId: user.id,
                repositoryId: repoId
            }
        },
        include: {
            repository: true
        }
    });

    if (!repositoryUser) {
        return ctx.reply("–≠—Ç–æ—Ç —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–µ —Å–≤—è–∑–∞–Ω —Å –≤–∞—à–∏–º –∞–∫–∫–∞—É–Ω—Ç–æ–º.");
    }

    const repoFullName = repositoryUser.repository.fullName;

    await prisma.repositoryUser.delete({
        where: {
            userId_repositoryId: {
                userId: user.id,
                repositoryId: repoId
            }
        }
    });

    const messageThreadId = Number(ctx.callbackQuery.message?.message_thread_id || 0);
    const currentThreadId = messageThreadId > 0 ? messageThreadId : null;

    await prisma.chatBinding.deleteMany({
        where: {
            repositoryId: repoId,
            chatId: chatId,
            threadId: currentThreadId,
        }
    });

    await ctx.editMessageText(`‚úÖ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π *${repoFullName}* —É–¥–∞–ª–µ–Ω –∏–∑ –≤–∞—à–µ–≥–æ —Å–ø–∏—Å–∫–∞.`, { parse_mode: "Markdown" });
  } catch (e) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è:", e);
    await ctx.reply("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
  }
});

bot.callbackQuery(/^cancel_delete_(\d+)$/, async (ctx) => {
  await ctx.answerCallbackQuery("–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.");
  const repoId = parseInt(ctx.match![1]);

  try {
    const repoInfo = await prisma.repository.findUnique({ where: { id: repoId }, select: { fullName: true } });
    const repoFullName = repoInfo ? repoInfo.fullName : "—Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π";
    await ctx.editMessageText(`‚ùå –£–¥–∞–ª–µ–Ω–∏–µ *${repoFullName}* –æ—Ç–º–µ–Ω–µ–Ω–æ.`, { parse_mode: "Markdown" });
  } catch (e) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ —É–¥–∞–ª–µ–Ω–∏—è:", e);
    await ctx.reply("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ.");
  }
});


bot.start();