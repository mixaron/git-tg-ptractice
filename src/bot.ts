import { Bot, InlineKeyboard, Keyboard } from "grammy";
import { config } from "dotenv";
import { PrismaClient } from "@prisma/client";

config();
export const bot = new Bot(process.env.BOT_TOKEN!);
const prisma = new PrismaClient();

// /start
bot.command("start", async (ctx) => {
  const userId = BigInt(Number(ctx.from?.id));
  const userName = ctx.from?.username;

  // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
  await prisma.user.upsert({
    where: { telegramId: userId },
    update: {},
    create: {
      telegramId: userId,
      telegramName: userName || null,
    },
  });

const menuKeyboard = new Keyboard()
  .text("/addrepo")
  .text("/myrepo")
  .row()
  .text("/help");

  await ctx.reply("üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ GitHub –∫–æ–º–º–∏—Ç–∞—Ö. –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:", {
    reply_markup: menuKeyboard,
  });
});

// /help
bot.command("help", (ctx) =>
  ctx.reply("üìö –ö–æ–º–∞–Ω–¥—ã:\n/start ‚Äî –∑–∞–ø—É—Å—Ç–∏—Ç—å\n/addrepo ‚Äî –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π\n/myrepo ‚Äî —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤")
);

// /addrepo
bot.command("addrepo", (ctx) =>
  ctx.reply("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –∏–º—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è (–ø—Ä–∏–º–µ—Ä: user/my-repo):")
);

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞: –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —ç—Ç–æ –∏–º—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
bot.on("message:text", async (ctx) => {
  const input = ctx.message.text.trim();
  const telegramId = BigInt(ctx.from?.id);
  const chatId = BigInt(ctx.chat?.id);

  // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
  if (input.startsWith("/")) return;

  // –ü—Ä–æ—Å—Ç–æ–π –≤–∞–ª–∏–¥–∞—Ç–æ—Ä fullName
  if (!input.match(/^[a-zA-Z0-9_.-]+\/[a-zA-Z0-9_.-]+$/)) {
    return ctx.reply("‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è. –§–æ—Ä–º–∞—Ç: `user/repo-name`", {
      parse_mode: "Markdown",
    });
  }

  const fullName = input;
  const githubUrl = `https://github.com/${fullName}`;
  const name = fullName.split("/").pop()!;

  try {
    // –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –Ω–∞—Ö–æ–¥–∏–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
    const repo = await prisma.repository.upsert({
      where: { fullName },
      update: {},
      create: {
        name,
        fullName,
        githubUrl,
        chatId,
        // threadId –∏ webhookId –ø–æ–∫–∞ –Ω–µ –∑–∞–ø–æ–ª–Ω—è–µ–º
      },
    });

    // –ü—Ä–∏–≤—è–∑–∫–∞ —á–∞—Ç–∞
    await prisma.chatBinding.upsert({
      where: {
        repositoryId_chatId: {
          repositoryId: repo.id,
          chatId: chatId,
        },
      },
      update: {},
      create: {
        repositoryId: repo.id,
        chatId: chatId,
      },
    });

    // –ü—Ä–∏–≤—è–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—é
    const user = await prisma.user.findUnique({
      where: { telegramId },
    });

    if (user) {
      await prisma.repositoryUser.upsert({
        where: {
          userId_repositoryId: {
            userId: user.id,
            repositoryId: repo.id,
          },
        },
        update: {},
        create: {
          userId: user.id,
          repositoryId: repo.id,
        },
      });
    }

    await ctx.reply(`‚úÖ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π *${fullName}* –¥–æ–±–∞–≤–ª–µ–Ω!`, {
      parse_mode: "Markdown",
    });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è:", error);
    await ctx.reply("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω —É–∂–µ –µ—Å—Ç—å.");
  }
});

// /myrepo ‚Äî —Å–ø–∏—Å–æ–∫ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
bot.command("myrepo", async (ctx) => {
  const telegramId = BigInt(Number(ctx.from?.id));

  const user = await prisma.user.findUnique({
    where: { telegramId },
    include: {
      repositories: {
        include: { repository: true },
      },
    },
  });

  if (!user || user.repositories.length === 0) {
    return ctx.reply("üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤.");
  }

  const text = user.repositories
    .map((ru, i) => `üîπ ${i + 1}. ${ru.repository.fullName}`)
    .join("\n");

  await ctx.reply(`üì¶ –í–∞—à–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏:\n${text}`);
});

// –ö–Ω–æ–ø–∫–∏
bot.callbackQuery("add_repo", async (ctx) => {
  await ctx.answerCallbackQuery();
  await ctx.reply("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –∏–º—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è (–ø—Ä–∏–º–µ—Ä: user/my-repo):");
});

bot.callbackQuery("my_repo", async (ctx) => {
  await ctx.answerCallbackQuery();

  const telegramId = BigInt(ctx.from?.id);
  const user = await prisma.user.findUnique({
    where: { telegramId },
    include: {
      repositories: { include: { repository: true } },
    },
  });

  if (!user || user.repositories.length === 0) {
    return ctx.reply("üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤.");
  }

  const text = user.repositories
    .map((ru, i) => `üîπ ${i + 1}. ${ru.repository.fullName}`)
    .join("\n");

  await ctx.reply(`üì¶ –í–∞—à–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏:\n${text}`);
});

bot.callbackQuery("help", async (ctx) => {
  await ctx.answerCallbackQuery();
  await ctx.reply("üìö –ö–æ–º–∞–Ω–¥—ã:\n/start ‚Äî –∑–∞–ø—É—Å—Ç–∏—Ç—å\n/addrepo ‚Äî –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π\n/myrepo ‚Äî —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤");
});

bot.start();
