import { Bot, InlineKeyboard } from "grammy";
import { config } from "dotenv";
import { PrismaClient } from "@prisma/client";

config();
export const bot = new Bot(process.env.BOT_TOKEN!);
const prisma = new PrismaClient();

bot.command("start", async (ctx) => {
  await ctx.reply("üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ GitHub –∫–æ–º–º–∏—Ç–∞—Ö.", {
    reply_markup: new InlineKeyboard()
      .text("–î–æ–±–∞–≤–∏—Ç—å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π", "add_repo")
      .row()
      .text("–ú–æ–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏", "my_repo")
      .row()
      .text("–ü–æ–º–æ—â—å", "help"),
  });
});

bot.command("help", (ctx) =>
  ctx.reply("üìö –ö–æ–º–∞–Ω–¥—ã:\n/start ‚Äî –∑–∞–ø—É—Å—Ç–∏—Ç—å\n/addrepo ‚Äî –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π\n/myrepo ‚Äî —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤")
);

bot.command("addrepo", (ctx) =>
  ctx.reply("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –∏–º—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è (–ø—Ä–∏–º–µ—Ä: my-repo):")
);

bot.on("message:text", async (ctx) => {
  const repoName = ctx.message.text.trim();
  const chatId = BigInt(ctx.chat.id);

  if (!repoName.match(/^[a-zA-Z0-9-_]+$/)) {
    return ctx.reply("–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è.");
  }

  await prisma.repository.create({
    data: {
      name: repoName,
      chatId: chatId,
    },
  });

  await ctx.reply(`–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π *${repoName}* –¥–æ–±–∞–≤–ª–µ–Ω!`, {
    parse_mode: "Markdown",
  });
});

bot.command("myrepo", async (ctx) => {
  const repos = await prisma.repository.findMany({
    where: { chatId: BigInt(ctx.chat.id) },
  });

  if (repos.length === 0) {
    return ctx.reply("üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤.");
  }

  const text = repos.map((r, i) => `üîπ ${i + 1}. ${r.name}`).join("\n");
  await ctx.reply(`–í–∞—à–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏:\n${text}`);
});

bot.callbackQuery("add_repo", async (ctx) => {
  await ctx.answerCallbackQuery();
  await ctx.reply("–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è:");
});

bot.callbackQuery("my_repo", async (ctx) => {
  await ctx.answerCallbackQuery();

  const chatId = ctx.callbackQuery.message?.chat.id;
  if (!chatId) {
    return ctx.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —á–∞—Ç.");
  }

  const repos = await prisma.repository.findMany({
    where: { chatId: BigInt(chatId) },
  });

  if (repos.length === 0) {
    return ctx.reply("üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤.");
  }

  const text = repos.map((r, i) => `üîπ ${i + 1}. ${r.name}`).join("\n");
  await ctx.reply(`–í–∞—à–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏:\n${text}`);
});


bot.callbackQuery("help", async (ctx) => {
  await ctx.answerCallbackQuery();
  await ctx.reply("–ö–æ–º–∞–Ω–¥—ã:\n/start ‚Äî –∑–∞–ø—É—Å—Ç–∏—Ç—å\n/addrepo ‚Äî –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π\n/myrepo ‚Äî —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤");
});

bot.start();
