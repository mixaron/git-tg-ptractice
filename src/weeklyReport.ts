import { PrismaClient } from '@prisma/client';
import { bot } from './bot';
import { format, subWeeks, startOfWeek, endOfWeek } from 'date-fns';
import * as cron from 'node-cron';

const prisma = new PrismaClient();

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á—ë—Ç–∞
async function generateWeeklyReport() {
  const now = new Date();
  const weekStart = startOfWeek(subWeeks(now, 1));
  const weekEnd = endOfWeek(subWeeks(now, 1));

  // 1. –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
  const repositories = await prisma.repository.findMany({
    include: {  
      chatBindings: true,
    },
  });

  for (const repo of repositories) {
    // 2. –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–æ–º–º–∏—Ç–∞–º –∑–∞ –Ω–µ–¥–µ–ª—é
    const commits = await prisma.commit.findMany({
      where: {
        repositoryId: repo.id,
        committedAt: {
          gte: weekStart,
          lte: weekEnd,
        },
      },
      include: {
        author: true,
      },
    });

    // 3. –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∞–≤—Ç–æ—Ä–∞–º
    const stats = new Map<number, { count: number; user: any }>();
    
    commits.forEach(commit => {
      if (!commit.author) return;
      
      const current = stats.get(commit.author.id) || { count: 0, user: commit.author };
      stats.set(commit.author.id, {
        count: current.count + 1,
        user: current.user,
      });
    });

    // 4. –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    let report = `üìä *–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç –¥–ª—è ${repo.name}* \n`;
    report += `*–ü–µ—Ä–∏–æ–¥:* ${format(weekStart, 'dd.MM.yyyy')} - ${format(weekEnd, 'dd.MM.yyyy')}\n\n`;
    
    if (stats.size === 0) {
      report += '–ù–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ –∫–æ–º–º–∏—Ç–æ–≤ –Ω–µ –±—ã–ª–æ\n';
    } else {
      report += '*–¢–æ–ø —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:*\n';
      
      // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∫–æ–º–º–∏—Ç–æ–≤
      const sortedStats = Array.from(stats.entries())
        .sort((a, b) => b[1].count - a[1].count);
      
      // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–∞–±–ª–∏—Ü—É
      report += '```\n';
      report += '‚Ññ | –ö–æ–º–º–∏—Ç—ã | –£—á–∞—Å—Ç–Ω–∏–∫\n';
      report += '--|---------|---------\n';
      
      sortedStats.forEach(([userId, data], index) => {
        const user = data.user;
        report += `${index + 1} | ${data.count.toString().padEnd(7)} | ${user.telegramName || 'N/A'} (${user.githubLogin || 'N/A'})\n`;
      });
      
      report += '```\n';
      report += `\n–í—Å–µ–≥–æ –∫–æ–º–º–∏—Ç–æ–≤: ${commits.length}`;
    }

    // 5. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –∫–∞–∂–¥—ã–π –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–π —á–∞—Ç
    for (const binding of repo.chatBindings) {
      try {
        await bot.api.sendMessage(
          Number(binding.chatId),
          report,
          {
            parse_mode: 'MarkdownV2',
            message_thread_id: binding.threadId ? Number(binding.threadId) : undefined,
          }
        );
      } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á—ë—Ç–∞ –≤ —á–∞—Ç ${binding.chatId}:`, error);
      }
    }

    // 6. –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á—ë—Ç –≤ –ë–î
    await prisma.weeklyReport.create({
      data: {
        repositoryId: repo.id,
        weekStart,
        weekEnd,
        stats: JSON.stringify(Object.fromEntries(stats)),
      },
    });
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –∫–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é –≤ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –≤ 10:00 UTC
export function startWeeklyReportScheduler() {
  // –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å '*/5 * * * * *' (–∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥) 0 10 * * 1
  cron.schedule('*/5 * * * * *', () => {
    console.log('–ó–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á—ë—Ç–∞...');
    generateWeeklyReport().catch(console.error);
  });
}